
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ShabPublication
 * 
 */
export type ShabPublication = $Result.DefaultSelection<Prisma.$ShabPublicationPayload>
/**
 * Model Auction
 * 
 */
export type Auction = $Result.DefaultSelection<Prisma.$AuctionPayload>
/**
 * Model AuctionObject
 * 
 */
export type AuctionObject = $Result.DefaultSelection<Prisma.$AuctionObjectPayload>
/**
 * Model Property
 * 
 */
export type Property = $Result.DefaultSelection<Prisma.$PropertyPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ShabPublications
 * const shabPublications = await prisma.shabPublication.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ShabPublications
   * const shabPublications = await prisma.shabPublication.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.shabPublication`: Exposes CRUD operations for the **ShabPublication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShabPublications
    * const shabPublications = await prisma.shabPublication.findMany()
    * ```
    */
  get shabPublication(): Prisma.ShabPublicationDelegate<ExtArgs>;

  /**
   * `prisma.auction`: Exposes CRUD operations for the **Auction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auctions
    * const auctions = await prisma.auction.findMany()
    * ```
    */
  get auction(): Prisma.AuctionDelegate<ExtArgs>;

  /**
   * `prisma.auctionObject`: Exposes CRUD operations for the **AuctionObject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuctionObjects
    * const auctionObjects = await prisma.auctionObject.findMany()
    * ```
    */
  get auctionObject(): Prisma.AuctionObjectDelegate<ExtArgs>;

  /**
   * `prisma.property`: Exposes CRUD operations for the **Property** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Properties
    * const properties = await prisma.property.findMany()
    * ```
    */
  get property(): Prisma.PropertyDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ShabPublication: 'ShabPublication',
    Auction: 'Auction',
    AuctionObject: 'AuctionObject',
    Property: 'Property'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "shabPublication" | "auction" | "auctionObject" | "property"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ShabPublication: {
        payload: Prisma.$ShabPublicationPayload<ExtArgs>
        fields: Prisma.ShabPublicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShabPublicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShabPublicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload>
          }
          findFirst: {
            args: Prisma.ShabPublicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShabPublicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload>
          }
          findMany: {
            args: Prisma.ShabPublicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload>[]
          }
          create: {
            args: Prisma.ShabPublicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload>
          }
          createMany: {
            args: Prisma.ShabPublicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShabPublicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload>[]
          }
          delete: {
            args: Prisma.ShabPublicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload>
          }
          update: {
            args: Prisma.ShabPublicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload>
          }
          deleteMany: {
            args: Prisma.ShabPublicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShabPublicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShabPublicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShabPublicationPayload>
          }
          aggregate: {
            args: Prisma.ShabPublicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShabPublication>
          }
          groupBy: {
            args: Prisma.ShabPublicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShabPublicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShabPublicationCountArgs<ExtArgs>
            result: $Utils.Optional<ShabPublicationCountAggregateOutputType> | number
          }
        }
      }
      Auction: {
        payload: Prisma.$AuctionPayload<ExtArgs>
        fields: Prisma.AuctionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuctionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuctionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          findFirst: {
            args: Prisma.AuctionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuctionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          findMany: {
            args: Prisma.AuctionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>[]
          }
          create: {
            args: Prisma.AuctionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          createMany: {
            args: Prisma.AuctionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuctionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>[]
          }
          delete: {
            args: Prisma.AuctionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          update: {
            args: Prisma.AuctionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          deleteMany: {
            args: Prisma.AuctionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuctionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuctionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          aggregate: {
            args: Prisma.AuctionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuction>
          }
          groupBy: {
            args: Prisma.AuctionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuctionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuctionCountArgs<ExtArgs>
            result: $Utils.Optional<AuctionCountAggregateOutputType> | number
          }
        }
      }
      AuctionObject: {
        payload: Prisma.$AuctionObjectPayload<ExtArgs>
        fields: Prisma.AuctionObjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuctionObjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuctionObjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload>
          }
          findFirst: {
            args: Prisma.AuctionObjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuctionObjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload>
          }
          findMany: {
            args: Prisma.AuctionObjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload>[]
          }
          create: {
            args: Prisma.AuctionObjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload>
          }
          createMany: {
            args: Prisma.AuctionObjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuctionObjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload>[]
          }
          delete: {
            args: Prisma.AuctionObjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload>
          }
          update: {
            args: Prisma.AuctionObjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload>
          }
          deleteMany: {
            args: Prisma.AuctionObjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuctionObjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuctionObjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionObjectPayload>
          }
          aggregate: {
            args: Prisma.AuctionObjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuctionObject>
          }
          groupBy: {
            args: Prisma.AuctionObjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuctionObjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuctionObjectCountArgs<ExtArgs>
            result: $Utils.Optional<AuctionObjectCountAggregateOutputType> | number
          }
        }
      }
      Property: {
        payload: Prisma.$PropertyPayload<ExtArgs>
        fields: Prisma.PropertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropertyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropertyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findFirst: {
            args: Prisma.PropertyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropertyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findMany: {
            args: Prisma.PropertyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>[]
          }
          create: {
            args: Prisma.PropertyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          createMany: {
            args: Prisma.PropertyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PropertyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>[]
          }
          delete: {
            args: Prisma.PropertyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          update: {
            args: Prisma.PropertyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          deleteMany: {
            args: Prisma.PropertyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PropertyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PropertyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          aggregate: {
            args: Prisma.PropertyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProperty>
          }
          groupBy: {
            args: Prisma.PropertyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PropertyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PropertyCountArgs<ExtArgs>
            result: $Utils.Optional<PropertyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ShabPublicationCountOutputType
   */

  export type ShabPublicationCountOutputType = {
    auctions: number
  }

  export type ShabPublicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auctions?: boolean | ShabPublicationCountOutputTypeCountAuctionsArgs
  }

  // Custom InputTypes
  /**
   * ShabPublicationCountOutputType without action
   */
  export type ShabPublicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublicationCountOutputType
     */
    select?: ShabPublicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShabPublicationCountOutputType without action
   */
  export type ShabPublicationCountOutputTypeCountAuctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionWhereInput
  }


  /**
   * Count Type AuctionCountOutputType
   */

  export type AuctionCountOutputType = {
    auctionObjects: number
  }

  export type AuctionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auctionObjects?: boolean | AuctionCountOutputTypeCountAuctionObjectsArgs
  }

  // Custom InputTypes
  /**
   * AuctionCountOutputType without action
   */
  export type AuctionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionCountOutputType
     */
    select?: AuctionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AuctionCountOutputType without action
   */
  export type AuctionCountOutputTypeCountAuctionObjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionObjectWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ShabPublication
   */

  export type AggregateShabPublication = {
    _count: ShabPublicationCountAggregateOutputType | null
    _min: ShabPublicationMinAggregateOutputType | null
    _max: ShabPublicationMaxAggregateOutputType | null
  }

  export type ShabPublicationMinAggregateOutputType = {
    id: string | null
    publishDate: Date | null
    xmlContent: string | null
    canton: string | null
    rubric: string | null
    subRubric: string | null
    officialLanguage: string | null
    processingStatus: string | null
    createdAt: Date | null
    processedAt: Date | null
  }

  export type ShabPublicationMaxAggregateOutputType = {
    id: string | null
    publishDate: Date | null
    xmlContent: string | null
    canton: string | null
    rubric: string | null
    subRubric: string | null
    officialLanguage: string | null
    processingStatus: string | null
    createdAt: Date | null
    processedAt: Date | null
  }

  export type ShabPublicationCountAggregateOutputType = {
    id: number
    publishDate: number
    xmlContent: number
    canton: number
    rubric: number
    subRubric: number
    officialLanguage: number
    processingStatus: number
    createdAt: number
    processedAt: number
    _all: number
  }


  export type ShabPublicationMinAggregateInputType = {
    id?: true
    publishDate?: true
    xmlContent?: true
    canton?: true
    rubric?: true
    subRubric?: true
    officialLanguage?: true
    processingStatus?: true
    createdAt?: true
    processedAt?: true
  }

  export type ShabPublicationMaxAggregateInputType = {
    id?: true
    publishDate?: true
    xmlContent?: true
    canton?: true
    rubric?: true
    subRubric?: true
    officialLanguage?: true
    processingStatus?: true
    createdAt?: true
    processedAt?: true
  }

  export type ShabPublicationCountAggregateInputType = {
    id?: true
    publishDate?: true
    xmlContent?: true
    canton?: true
    rubric?: true
    subRubric?: true
    officialLanguage?: true
    processingStatus?: true
    createdAt?: true
    processedAt?: true
    _all?: true
  }

  export type ShabPublicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShabPublication to aggregate.
     */
    where?: ShabPublicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShabPublications to fetch.
     */
    orderBy?: ShabPublicationOrderByWithRelationInput | ShabPublicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShabPublicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShabPublications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShabPublications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShabPublications
    **/
    _count?: true | ShabPublicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShabPublicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShabPublicationMaxAggregateInputType
  }

  export type GetShabPublicationAggregateType<T extends ShabPublicationAggregateArgs> = {
        [P in keyof T & keyof AggregateShabPublication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShabPublication[P]>
      : GetScalarType<T[P], AggregateShabPublication[P]>
  }




  export type ShabPublicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShabPublicationWhereInput
    orderBy?: ShabPublicationOrderByWithAggregationInput | ShabPublicationOrderByWithAggregationInput[]
    by: ShabPublicationScalarFieldEnum[] | ShabPublicationScalarFieldEnum
    having?: ShabPublicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShabPublicationCountAggregateInputType | true
    _min?: ShabPublicationMinAggregateInputType
    _max?: ShabPublicationMaxAggregateInputType
  }

  export type ShabPublicationGroupByOutputType = {
    id: string
    publishDate: Date
    xmlContent: string
    canton: string
    rubric: string
    subRubric: string
    officialLanguage: string
    processingStatus: string
    createdAt: Date
    processedAt: Date | null
    _count: ShabPublicationCountAggregateOutputType | null
    _min: ShabPublicationMinAggregateOutputType | null
    _max: ShabPublicationMaxAggregateOutputType | null
  }

  type GetShabPublicationGroupByPayload<T extends ShabPublicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShabPublicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShabPublicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShabPublicationGroupByOutputType[P]>
            : GetScalarType<T[P], ShabPublicationGroupByOutputType[P]>
        }
      >
    >


  export type ShabPublicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    publishDate?: boolean
    xmlContent?: boolean
    canton?: boolean
    rubric?: boolean
    subRubric?: boolean
    officialLanguage?: boolean
    processingStatus?: boolean
    createdAt?: boolean
    processedAt?: boolean
    auctions?: boolean | ShabPublication$auctionsArgs<ExtArgs>
    _count?: boolean | ShabPublicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shabPublication"]>

  export type ShabPublicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    publishDate?: boolean
    xmlContent?: boolean
    canton?: boolean
    rubric?: boolean
    subRubric?: boolean
    officialLanguage?: boolean
    processingStatus?: boolean
    createdAt?: boolean
    processedAt?: boolean
  }, ExtArgs["result"]["shabPublication"]>

  export type ShabPublicationSelectScalar = {
    id?: boolean
    publishDate?: boolean
    xmlContent?: boolean
    canton?: boolean
    rubric?: boolean
    subRubric?: boolean
    officialLanguage?: boolean
    processingStatus?: boolean
    createdAt?: boolean
    processedAt?: boolean
  }

  export type ShabPublicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auctions?: boolean | ShabPublication$auctionsArgs<ExtArgs>
    _count?: boolean | ShabPublicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShabPublicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ShabPublicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShabPublication"
    objects: {
      auctions: Prisma.$AuctionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      publishDate: Date
      xmlContent: string
      canton: string
      rubric: string
      subRubric: string
      officialLanguage: string
      processingStatus: string
      createdAt: Date
      processedAt: Date | null
    }, ExtArgs["result"]["shabPublication"]>
    composites: {}
  }

  type ShabPublicationGetPayload<S extends boolean | null | undefined | ShabPublicationDefaultArgs> = $Result.GetResult<Prisma.$ShabPublicationPayload, S>

  type ShabPublicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShabPublicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShabPublicationCountAggregateInputType | true
    }

  export interface ShabPublicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShabPublication'], meta: { name: 'ShabPublication' } }
    /**
     * Find zero or one ShabPublication that matches the filter.
     * @param {ShabPublicationFindUniqueArgs} args - Arguments to find a ShabPublication
     * @example
     * // Get one ShabPublication
     * const shabPublication = await prisma.shabPublication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShabPublicationFindUniqueArgs>(args: SelectSubset<T, ShabPublicationFindUniqueArgs<ExtArgs>>): Prisma__ShabPublicationClient<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShabPublication that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShabPublicationFindUniqueOrThrowArgs} args - Arguments to find a ShabPublication
     * @example
     * // Get one ShabPublication
     * const shabPublication = await prisma.shabPublication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShabPublicationFindUniqueOrThrowArgs>(args: SelectSubset<T, ShabPublicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShabPublicationClient<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShabPublication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShabPublicationFindFirstArgs} args - Arguments to find a ShabPublication
     * @example
     * // Get one ShabPublication
     * const shabPublication = await prisma.shabPublication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShabPublicationFindFirstArgs>(args?: SelectSubset<T, ShabPublicationFindFirstArgs<ExtArgs>>): Prisma__ShabPublicationClient<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShabPublication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShabPublicationFindFirstOrThrowArgs} args - Arguments to find a ShabPublication
     * @example
     * // Get one ShabPublication
     * const shabPublication = await prisma.shabPublication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShabPublicationFindFirstOrThrowArgs>(args?: SelectSubset<T, ShabPublicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShabPublicationClient<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShabPublications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShabPublicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShabPublications
     * const shabPublications = await prisma.shabPublication.findMany()
     * 
     * // Get first 10 ShabPublications
     * const shabPublications = await prisma.shabPublication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shabPublicationWithIdOnly = await prisma.shabPublication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShabPublicationFindManyArgs>(args?: SelectSubset<T, ShabPublicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShabPublication.
     * @param {ShabPublicationCreateArgs} args - Arguments to create a ShabPublication.
     * @example
     * // Create one ShabPublication
     * const ShabPublication = await prisma.shabPublication.create({
     *   data: {
     *     // ... data to create a ShabPublication
     *   }
     * })
     * 
     */
    create<T extends ShabPublicationCreateArgs>(args: SelectSubset<T, ShabPublicationCreateArgs<ExtArgs>>): Prisma__ShabPublicationClient<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShabPublications.
     * @param {ShabPublicationCreateManyArgs} args - Arguments to create many ShabPublications.
     * @example
     * // Create many ShabPublications
     * const shabPublication = await prisma.shabPublication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShabPublicationCreateManyArgs>(args?: SelectSubset<T, ShabPublicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShabPublications and returns the data saved in the database.
     * @param {ShabPublicationCreateManyAndReturnArgs} args - Arguments to create many ShabPublications.
     * @example
     * // Create many ShabPublications
     * const shabPublication = await prisma.shabPublication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShabPublications and only return the `id`
     * const shabPublicationWithIdOnly = await prisma.shabPublication.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShabPublicationCreateManyAndReturnArgs>(args?: SelectSubset<T, ShabPublicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ShabPublication.
     * @param {ShabPublicationDeleteArgs} args - Arguments to delete one ShabPublication.
     * @example
     * // Delete one ShabPublication
     * const ShabPublication = await prisma.shabPublication.delete({
     *   where: {
     *     // ... filter to delete one ShabPublication
     *   }
     * })
     * 
     */
    delete<T extends ShabPublicationDeleteArgs>(args: SelectSubset<T, ShabPublicationDeleteArgs<ExtArgs>>): Prisma__ShabPublicationClient<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShabPublication.
     * @param {ShabPublicationUpdateArgs} args - Arguments to update one ShabPublication.
     * @example
     * // Update one ShabPublication
     * const shabPublication = await prisma.shabPublication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShabPublicationUpdateArgs>(args: SelectSubset<T, ShabPublicationUpdateArgs<ExtArgs>>): Prisma__ShabPublicationClient<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShabPublications.
     * @param {ShabPublicationDeleteManyArgs} args - Arguments to filter ShabPublications to delete.
     * @example
     * // Delete a few ShabPublications
     * const { count } = await prisma.shabPublication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShabPublicationDeleteManyArgs>(args?: SelectSubset<T, ShabPublicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShabPublications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShabPublicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShabPublications
     * const shabPublication = await prisma.shabPublication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShabPublicationUpdateManyArgs>(args: SelectSubset<T, ShabPublicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShabPublication.
     * @param {ShabPublicationUpsertArgs} args - Arguments to update or create a ShabPublication.
     * @example
     * // Update or create a ShabPublication
     * const shabPublication = await prisma.shabPublication.upsert({
     *   create: {
     *     // ... data to create a ShabPublication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShabPublication we want to update
     *   }
     * })
     */
    upsert<T extends ShabPublicationUpsertArgs>(args: SelectSubset<T, ShabPublicationUpsertArgs<ExtArgs>>): Prisma__ShabPublicationClient<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShabPublications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShabPublicationCountArgs} args - Arguments to filter ShabPublications to count.
     * @example
     * // Count the number of ShabPublications
     * const count = await prisma.shabPublication.count({
     *   where: {
     *     // ... the filter for the ShabPublications we want to count
     *   }
     * })
    **/
    count<T extends ShabPublicationCountArgs>(
      args?: Subset<T, ShabPublicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShabPublicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShabPublication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShabPublicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShabPublicationAggregateArgs>(args: Subset<T, ShabPublicationAggregateArgs>): Prisma.PrismaPromise<GetShabPublicationAggregateType<T>>

    /**
     * Group by ShabPublication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShabPublicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShabPublicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShabPublicationGroupByArgs['orderBy'] }
        : { orderBy?: ShabPublicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShabPublicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShabPublicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShabPublication model
   */
  readonly fields: ShabPublicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShabPublication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShabPublicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auctions<T extends ShabPublication$auctionsArgs<ExtArgs> = {}>(args?: Subset<T, ShabPublication$auctionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShabPublication model
   */ 
  interface ShabPublicationFieldRefs {
    readonly id: FieldRef<"ShabPublication", 'String'>
    readonly publishDate: FieldRef<"ShabPublication", 'DateTime'>
    readonly xmlContent: FieldRef<"ShabPublication", 'String'>
    readonly canton: FieldRef<"ShabPublication", 'String'>
    readonly rubric: FieldRef<"ShabPublication", 'String'>
    readonly subRubric: FieldRef<"ShabPublication", 'String'>
    readonly officialLanguage: FieldRef<"ShabPublication", 'String'>
    readonly processingStatus: FieldRef<"ShabPublication", 'String'>
    readonly createdAt: FieldRef<"ShabPublication", 'DateTime'>
    readonly processedAt: FieldRef<"ShabPublication", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShabPublication findUnique
   */
  export type ShabPublicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
    /**
     * Filter, which ShabPublication to fetch.
     */
    where: ShabPublicationWhereUniqueInput
  }

  /**
   * ShabPublication findUniqueOrThrow
   */
  export type ShabPublicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
    /**
     * Filter, which ShabPublication to fetch.
     */
    where: ShabPublicationWhereUniqueInput
  }

  /**
   * ShabPublication findFirst
   */
  export type ShabPublicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
    /**
     * Filter, which ShabPublication to fetch.
     */
    where?: ShabPublicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShabPublications to fetch.
     */
    orderBy?: ShabPublicationOrderByWithRelationInput | ShabPublicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShabPublications.
     */
    cursor?: ShabPublicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShabPublications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShabPublications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShabPublications.
     */
    distinct?: ShabPublicationScalarFieldEnum | ShabPublicationScalarFieldEnum[]
  }

  /**
   * ShabPublication findFirstOrThrow
   */
  export type ShabPublicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
    /**
     * Filter, which ShabPublication to fetch.
     */
    where?: ShabPublicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShabPublications to fetch.
     */
    orderBy?: ShabPublicationOrderByWithRelationInput | ShabPublicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShabPublications.
     */
    cursor?: ShabPublicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShabPublications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShabPublications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShabPublications.
     */
    distinct?: ShabPublicationScalarFieldEnum | ShabPublicationScalarFieldEnum[]
  }

  /**
   * ShabPublication findMany
   */
  export type ShabPublicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
    /**
     * Filter, which ShabPublications to fetch.
     */
    where?: ShabPublicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShabPublications to fetch.
     */
    orderBy?: ShabPublicationOrderByWithRelationInput | ShabPublicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShabPublications.
     */
    cursor?: ShabPublicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShabPublications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShabPublications.
     */
    skip?: number
    distinct?: ShabPublicationScalarFieldEnum | ShabPublicationScalarFieldEnum[]
  }

  /**
   * ShabPublication create
   */
  export type ShabPublicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
    /**
     * The data needed to create a ShabPublication.
     */
    data: XOR<ShabPublicationCreateInput, ShabPublicationUncheckedCreateInput>
  }

  /**
   * ShabPublication createMany
   */
  export type ShabPublicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShabPublications.
     */
    data: ShabPublicationCreateManyInput | ShabPublicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShabPublication createManyAndReturn
   */
  export type ShabPublicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ShabPublications.
     */
    data: ShabPublicationCreateManyInput | ShabPublicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShabPublication update
   */
  export type ShabPublicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
    /**
     * The data needed to update a ShabPublication.
     */
    data: XOR<ShabPublicationUpdateInput, ShabPublicationUncheckedUpdateInput>
    /**
     * Choose, which ShabPublication to update.
     */
    where: ShabPublicationWhereUniqueInput
  }

  /**
   * ShabPublication updateMany
   */
  export type ShabPublicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShabPublications.
     */
    data: XOR<ShabPublicationUpdateManyMutationInput, ShabPublicationUncheckedUpdateManyInput>
    /**
     * Filter which ShabPublications to update
     */
    where?: ShabPublicationWhereInput
  }

  /**
   * ShabPublication upsert
   */
  export type ShabPublicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
    /**
     * The filter to search for the ShabPublication to update in case it exists.
     */
    where: ShabPublicationWhereUniqueInput
    /**
     * In case the ShabPublication found by the `where` argument doesn't exist, create a new ShabPublication with this data.
     */
    create: XOR<ShabPublicationCreateInput, ShabPublicationUncheckedCreateInput>
    /**
     * In case the ShabPublication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShabPublicationUpdateInput, ShabPublicationUncheckedUpdateInput>
  }

  /**
   * ShabPublication delete
   */
  export type ShabPublicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
    /**
     * Filter which ShabPublication to delete.
     */
    where: ShabPublicationWhereUniqueInput
  }

  /**
   * ShabPublication deleteMany
   */
  export type ShabPublicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShabPublications to delete
     */
    where?: ShabPublicationWhereInput
  }

  /**
   * ShabPublication.auctions
   */
  export type ShabPublication$auctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    where?: AuctionWhereInput
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    cursor?: AuctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * ShabPublication without action
   */
  export type ShabPublicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShabPublication
     */
    select?: ShabPublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShabPublicationInclude<ExtArgs> | null
  }


  /**
   * Model Auction
   */

  export type AggregateAuction = {
    _count: AuctionCountAggregateOutputType | null
    _min: AuctionMinAggregateOutputType | null
    _max: AuctionMaxAggregateOutputType | null
  }

  export type AuctionMinAggregateOutputType = {
    id: string | null
    shabPublicationId: string | null
    auctionDate: Date | null
    auctionLocation: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuctionMaxAggregateOutputType = {
    id: string | null
    shabPublicationId: string | null
    auctionDate: Date | null
    auctionLocation: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuctionCountAggregateOutputType = {
    id: number
    shabPublicationId: number
    auctionDate: number
    auctionLocation: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AuctionMinAggregateInputType = {
    id?: true
    shabPublicationId?: true
    auctionDate?: true
    auctionLocation?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuctionMaxAggregateInputType = {
    id?: true
    shabPublicationId?: true
    auctionDate?: true
    auctionLocation?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuctionCountAggregateInputType = {
    id?: true
    shabPublicationId?: true
    auctionDate?: true
    auctionLocation?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AuctionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auction to aggregate.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auctions
    **/
    _count?: true | AuctionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuctionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuctionMaxAggregateInputType
  }

  export type GetAuctionAggregateType<T extends AuctionAggregateArgs> = {
        [P in keyof T & keyof AggregateAuction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuction[P]>
      : GetScalarType<T[P], AggregateAuction[P]>
  }




  export type AuctionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionWhereInput
    orderBy?: AuctionOrderByWithAggregationInput | AuctionOrderByWithAggregationInput[]
    by: AuctionScalarFieldEnum[] | AuctionScalarFieldEnum
    having?: AuctionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuctionCountAggregateInputType | true
    _min?: AuctionMinAggregateInputType
    _max?: AuctionMaxAggregateInputType
  }

  export type AuctionGroupByOutputType = {
    id: string
    shabPublicationId: string
    auctionDate: Date
    auctionLocation: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: AuctionCountAggregateOutputType | null
    _min: AuctionMinAggregateOutputType | null
    _max: AuctionMaxAggregateOutputType | null
  }

  type GetAuctionGroupByPayload<T extends AuctionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuctionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuctionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuctionGroupByOutputType[P]>
            : GetScalarType<T[P], AuctionGroupByOutputType[P]>
        }
      >
    >


  export type AuctionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shabPublicationId?: boolean
    auctionDate?: boolean
    auctionLocation?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shabPublication?: boolean | ShabPublicationDefaultArgs<ExtArgs>
    auctionObjects?: boolean | Auction$auctionObjectsArgs<ExtArgs>
    _count?: boolean | AuctionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auction"]>

  export type AuctionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shabPublicationId?: boolean
    auctionDate?: boolean
    auctionLocation?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shabPublication?: boolean | ShabPublicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auction"]>

  export type AuctionSelectScalar = {
    id?: boolean
    shabPublicationId?: boolean
    auctionDate?: boolean
    auctionLocation?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AuctionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shabPublication?: boolean | ShabPublicationDefaultArgs<ExtArgs>
    auctionObjects?: boolean | Auction$auctionObjectsArgs<ExtArgs>
    _count?: boolean | AuctionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AuctionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shabPublication?: boolean | ShabPublicationDefaultArgs<ExtArgs>
  }

  export type $AuctionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Auction"
    objects: {
      shabPublication: Prisma.$ShabPublicationPayload<ExtArgs>
      auctionObjects: Prisma.$AuctionObjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shabPublicationId: string
      auctionDate: Date
      auctionLocation: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["auction"]>
    composites: {}
  }

  type AuctionGetPayload<S extends boolean | null | undefined | AuctionDefaultArgs> = $Result.GetResult<Prisma.$AuctionPayload, S>

  type AuctionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuctionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuctionCountAggregateInputType | true
    }

  export interface AuctionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auction'], meta: { name: 'Auction' } }
    /**
     * Find zero or one Auction that matches the filter.
     * @param {AuctionFindUniqueArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuctionFindUniqueArgs>(args: SelectSubset<T, AuctionFindUniqueArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Auction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuctionFindUniqueOrThrowArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuctionFindUniqueOrThrowArgs>(args: SelectSubset<T, AuctionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Auction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindFirstArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuctionFindFirstArgs>(args?: SelectSubset<T, AuctionFindFirstArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Auction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindFirstOrThrowArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuctionFindFirstOrThrowArgs>(args?: SelectSubset<T, AuctionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Auctions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auctions
     * const auctions = await prisma.auction.findMany()
     * 
     * // Get first 10 Auctions
     * const auctions = await prisma.auction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auctionWithIdOnly = await prisma.auction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuctionFindManyArgs>(args?: SelectSubset<T, AuctionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Auction.
     * @param {AuctionCreateArgs} args - Arguments to create a Auction.
     * @example
     * // Create one Auction
     * const Auction = await prisma.auction.create({
     *   data: {
     *     // ... data to create a Auction
     *   }
     * })
     * 
     */
    create<T extends AuctionCreateArgs>(args: SelectSubset<T, AuctionCreateArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Auctions.
     * @param {AuctionCreateManyArgs} args - Arguments to create many Auctions.
     * @example
     * // Create many Auctions
     * const auction = await prisma.auction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuctionCreateManyArgs>(args?: SelectSubset<T, AuctionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Auctions and returns the data saved in the database.
     * @param {AuctionCreateManyAndReturnArgs} args - Arguments to create many Auctions.
     * @example
     * // Create many Auctions
     * const auction = await prisma.auction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Auctions and only return the `id`
     * const auctionWithIdOnly = await prisma.auction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuctionCreateManyAndReturnArgs>(args?: SelectSubset<T, AuctionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Auction.
     * @param {AuctionDeleteArgs} args - Arguments to delete one Auction.
     * @example
     * // Delete one Auction
     * const Auction = await prisma.auction.delete({
     *   where: {
     *     // ... filter to delete one Auction
     *   }
     * })
     * 
     */
    delete<T extends AuctionDeleteArgs>(args: SelectSubset<T, AuctionDeleteArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Auction.
     * @param {AuctionUpdateArgs} args - Arguments to update one Auction.
     * @example
     * // Update one Auction
     * const auction = await prisma.auction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuctionUpdateArgs>(args: SelectSubset<T, AuctionUpdateArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Auctions.
     * @param {AuctionDeleteManyArgs} args - Arguments to filter Auctions to delete.
     * @example
     * // Delete a few Auctions
     * const { count } = await prisma.auction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuctionDeleteManyArgs>(args?: SelectSubset<T, AuctionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auctions
     * const auction = await prisma.auction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuctionUpdateManyArgs>(args: SelectSubset<T, AuctionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auction.
     * @param {AuctionUpsertArgs} args - Arguments to update or create a Auction.
     * @example
     * // Update or create a Auction
     * const auction = await prisma.auction.upsert({
     *   create: {
     *     // ... data to create a Auction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auction we want to update
     *   }
     * })
     */
    upsert<T extends AuctionUpsertArgs>(args: SelectSubset<T, AuctionUpsertArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Auctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionCountArgs} args - Arguments to filter Auctions to count.
     * @example
     * // Count the number of Auctions
     * const count = await prisma.auction.count({
     *   where: {
     *     // ... the filter for the Auctions we want to count
     *   }
     * })
    **/
    count<T extends AuctionCountArgs>(
      args?: Subset<T, AuctionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuctionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuctionAggregateArgs>(args: Subset<T, AuctionAggregateArgs>): Prisma.PrismaPromise<GetAuctionAggregateType<T>>

    /**
     * Group by Auction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuctionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuctionGroupByArgs['orderBy'] }
        : { orderBy?: AuctionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuctionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuctionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Auction model
   */
  readonly fields: AuctionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Auction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuctionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shabPublication<T extends ShabPublicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShabPublicationDefaultArgs<ExtArgs>>): Prisma__ShabPublicationClient<$Result.GetResult<Prisma.$ShabPublicationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    auctionObjects<T extends Auction$auctionObjectsArgs<ExtArgs> = {}>(args?: Subset<T, Auction$auctionObjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Auction model
   */ 
  interface AuctionFieldRefs {
    readonly id: FieldRef<"Auction", 'String'>
    readonly shabPublicationId: FieldRef<"Auction", 'String'>
    readonly auctionDate: FieldRef<"Auction", 'DateTime'>
    readonly auctionLocation: FieldRef<"Auction", 'String'>
    readonly status: FieldRef<"Auction", 'String'>
    readonly createdAt: FieldRef<"Auction", 'DateTime'>
    readonly updatedAt: FieldRef<"Auction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Auction findUnique
   */
  export type AuctionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction findUniqueOrThrow
   */
  export type AuctionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction findFirst
   */
  export type AuctionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auctions.
     */
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Auction findFirstOrThrow
   */
  export type AuctionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auctions.
     */
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Auction findMany
   */
  export type AuctionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auctions to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Auction create
   */
  export type AuctionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The data needed to create a Auction.
     */
    data: XOR<AuctionCreateInput, AuctionUncheckedCreateInput>
  }

  /**
   * Auction createMany
   */
  export type AuctionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auctions.
     */
    data: AuctionCreateManyInput | AuctionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Auction createManyAndReturn
   */
  export type AuctionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Auctions.
     */
    data: AuctionCreateManyInput | AuctionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Auction update
   */
  export type AuctionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The data needed to update a Auction.
     */
    data: XOR<AuctionUpdateInput, AuctionUncheckedUpdateInput>
    /**
     * Choose, which Auction to update.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction updateMany
   */
  export type AuctionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auctions.
     */
    data: XOR<AuctionUpdateManyMutationInput, AuctionUncheckedUpdateManyInput>
    /**
     * Filter which Auctions to update
     */
    where?: AuctionWhereInput
  }

  /**
   * Auction upsert
   */
  export type AuctionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The filter to search for the Auction to update in case it exists.
     */
    where: AuctionWhereUniqueInput
    /**
     * In case the Auction found by the `where` argument doesn't exist, create a new Auction with this data.
     */
    create: XOR<AuctionCreateInput, AuctionUncheckedCreateInput>
    /**
     * In case the Auction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuctionUpdateInput, AuctionUncheckedUpdateInput>
  }

  /**
   * Auction delete
   */
  export type AuctionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter which Auction to delete.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction deleteMany
   */
  export type AuctionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auctions to delete
     */
    where?: AuctionWhereInput
  }

  /**
   * Auction.auctionObjects
   */
  export type Auction$auctionObjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    where?: AuctionObjectWhereInput
    orderBy?: AuctionObjectOrderByWithRelationInput | AuctionObjectOrderByWithRelationInput[]
    cursor?: AuctionObjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuctionObjectScalarFieldEnum | AuctionObjectScalarFieldEnum[]
  }

  /**
   * Auction without action
   */
  export type AuctionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
  }


  /**
   * Model AuctionObject
   */

  export type AggregateAuctionObject = {
    _count: AuctionObjectCountAggregateOutputType | null
    _avg: AuctionObjectAvgAggregateOutputType | null
    _sum: AuctionObjectSumAggregateOutputType | null
    _min: AuctionObjectMinAggregateOutputType | null
    _max: AuctionObjectMaxAggregateOutputType | null
  }

  export type AuctionObjectAvgAggregateOutputType = {
    objectOrder: number | null
  }

  export type AuctionObjectSumAggregateOutputType = {
    objectOrder: number | null
  }

  export type AuctionObjectMinAggregateOutputType = {
    id: string | null
    auctionId: string | null
    rawText: string | null
    objectOrder: number | null
    createdAt: Date | null
  }

  export type AuctionObjectMaxAggregateOutputType = {
    id: string | null
    auctionId: string | null
    rawText: string | null
    objectOrder: number | null
    createdAt: Date | null
  }

  export type AuctionObjectCountAggregateOutputType = {
    id: number
    auctionId: number
    rawText: number
    objectOrder: number
    createdAt: number
    _all: number
  }


  export type AuctionObjectAvgAggregateInputType = {
    objectOrder?: true
  }

  export type AuctionObjectSumAggregateInputType = {
    objectOrder?: true
  }

  export type AuctionObjectMinAggregateInputType = {
    id?: true
    auctionId?: true
    rawText?: true
    objectOrder?: true
    createdAt?: true
  }

  export type AuctionObjectMaxAggregateInputType = {
    id?: true
    auctionId?: true
    rawText?: true
    objectOrder?: true
    createdAt?: true
  }

  export type AuctionObjectCountAggregateInputType = {
    id?: true
    auctionId?: true
    rawText?: true
    objectOrder?: true
    createdAt?: true
    _all?: true
  }

  export type AuctionObjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuctionObject to aggregate.
     */
    where?: AuctionObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuctionObjects to fetch.
     */
    orderBy?: AuctionObjectOrderByWithRelationInput | AuctionObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuctionObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuctionObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuctionObjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuctionObjects
    **/
    _count?: true | AuctionObjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuctionObjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuctionObjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuctionObjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuctionObjectMaxAggregateInputType
  }

  export type GetAuctionObjectAggregateType<T extends AuctionObjectAggregateArgs> = {
        [P in keyof T & keyof AggregateAuctionObject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuctionObject[P]>
      : GetScalarType<T[P], AggregateAuctionObject[P]>
  }




  export type AuctionObjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionObjectWhereInput
    orderBy?: AuctionObjectOrderByWithAggregationInput | AuctionObjectOrderByWithAggregationInput[]
    by: AuctionObjectScalarFieldEnum[] | AuctionObjectScalarFieldEnum
    having?: AuctionObjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuctionObjectCountAggregateInputType | true
    _avg?: AuctionObjectAvgAggregateInputType
    _sum?: AuctionObjectSumAggregateInputType
    _min?: AuctionObjectMinAggregateInputType
    _max?: AuctionObjectMaxAggregateInputType
  }

  export type AuctionObjectGroupByOutputType = {
    id: string
    auctionId: string
    rawText: string
    objectOrder: number
    createdAt: Date
    _count: AuctionObjectCountAggregateOutputType | null
    _avg: AuctionObjectAvgAggregateOutputType | null
    _sum: AuctionObjectSumAggregateOutputType | null
    _min: AuctionObjectMinAggregateOutputType | null
    _max: AuctionObjectMaxAggregateOutputType | null
  }

  type GetAuctionObjectGroupByPayload<T extends AuctionObjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuctionObjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuctionObjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuctionObjectGroupByOutputType[P]>
            : GetScalarType<T[P], AuctionObjectGroupByOutputType[P]>
        }
      >
    >


  export type AuctionObjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    auctionId?: boolean
    rawText?: boolean
    objectOrder?: boolean
    createdAt?: boolean
    auction?: boolean | AuctionDefaultArgs<ExtArgs>
    property?: boolean | AuctionObject$propertyArgs<ExtArgs>
  }, ExtArgs["result"]["auctionObject"]>

  export type AuctionObjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    auctionId?: boolean
    rawText?: boolean
    objectOrder?: boolean
    createdAt?: boolean
    auction?: boolean | AuctionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auctionObject"]>

  export type AuctionObjectSelectScalar = {
    id?: boolean
    auctionId?: boolean
    rawText?: boolean
    objectOrder?: boolean
    createdAt?: boolean
  }

  export type AuctionObjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auction?: boolean | AuctionDefaultArgs<ExtArgs>
    property?: boolean | AuctionObject$propertyArgs<ExtArgs>
  }
  export type AuctionObjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auction?: boolean | AuctionDefaultArgs<ExtArgs>
  }

  export type $AuctionObjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuctionObject"
    objects: {
      auction: Prisma.$AuctionPayload<ExtArgs>
      property: Prisma.$PropertyPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      auctionId: string
      rawText: string
      objectOrder: number
      createdAt: Date
    }, ExtArgs["result"]["auctionObject"]>
    composites: {}
  }

  type AuctionObjectGetPayload<S extends boolean | null | undefined | AuctionObjectDefaultArgs> = $Result.GetResult<Prisma.$AuctionObjectPayload, S>

  type AuctionObjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuctionObjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuctionObjectCountAggregateInputType | true
    }

  export interface AuctionObjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuctionObject'], meta: { name: 'AuctionObject' } }
    /**
     * Find zero or one AuctionObject that matches the filter.
     * @param {AuctionObjectFindUniqueArgs} args - Arguments to find a AuctionObject
     * @example
     * // Get one AuctionObject
     * const auctionObject = await prisma.auctionObject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuctionObjectFindUniqueArgs>(args: SelectSubset<T, AuctionObjectFindUniqueArgs<ExtArgs>>): Prisma__AuctionObjectClient<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuctionObject that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuctionObjectFindUniqueOrThrowArgs} args - Arguments to find a AuctionObject
     * @example
     * // Get one AuctionObject
     * const auctionObject = await prisma.auctionObject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuctionObjectFindUniqueOrThrowArgs>(args: SelectSubset<T, AuctionObjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuctionObjectClient<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuctionObject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionObjectFindFirstArgs} args - Arguments to find a AuctionObject
     * @example
     * // Get one AuctionObject
     * const auctionObject = await prisma.auctionObject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuctionObjectFindFirstArgs>(args?: SelectSubset<T, AuctionObjectFindFirstArgs<ExtArgs>>): Prisma__AuctionObjectClient<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuctionObject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionObjectFindFirstOrThrowArgs} args - Arguments to find a AuctionObject
     * @example
     * // Get one AuctionObject
     * const auctionObject = await prisma.auctionObject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuctionObjectFindFirstOrThrowArgs>(args?: SelectSubset<T, AuctionObjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuctionObjectClient<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuctionObjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionObjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuctionObjects
     * const auctionObjects = await prisma.auctionObject.findMany()
     * 
     * // Get first 10 AuctionObjects
     * const auctionObjects = await prisma.auctionObject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auctionObjectWithIdOnly = await prisma.auctionObject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuctionObjectFindManyArgs>(args?: SelectSubset<T, AuctionObjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuctionObject.
     * @param {AuctionObjectCreateArgs} args - Arguments to create a AuctionObject.
     * @example
     * // Create one AuctionObject
     * const AuctionObject = await prisma.auctionObject.create({
     *   data: {
     *     // ... data to create a AuctionObject
     *   }
     * })
     * 
     */
    create<T extends AuctionObjectCreateArgs>(args: SelectSubset<T, AuctionObjectCreateArgs<ExtArgs>>): Prisma__AuctionObjectClient<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuctionObjects.
     * @param {AuctionObjectCreateManyArgs} args - Arguments to create many AuctionObjects.
     * @example
     * // Create many AuctionObjects
     * const auctionObject = await prisma.auctionObject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuctionObjectCreateManyArgs>(args?: SelectSubset<T, AuctionObjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuctionObjects and returns the data saved in the database.
     * @param {AuctionObjectCreateManyAndReturnArgs} args - Arguments to create many AuctionObjects.
     * @example
     * // Create many AuctionObjects
     * const auctionObject = await prisma.auctionObject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuctionObjects and only return the `id`
     * const auctionObjectWithIdOnly = await prisma.auctionObject.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuctionObjectCreateManyAndReturnArgs>(args?: SelectSubset<T, AuctionObjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuctionObject.
     * @param {AuctionObjectDeleteArgs} args - Arguments to delete one AuctionObject.
     * @example
     * // Delete one AuctionObject
     * const AuctionObject = await prisma.auctionObject.delete({
     *   where: {
     *     // ... filter to delete one AuctionObject
     *   }
     * })
     * 
     */
    delete<T extends AuctionObjectDeleteArgs>(args: SelectSubset<T, AuctionObjectDeleteArgs<ExtArgs>>): Prisma__AuctionObjectClient<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuctionObject.
     * @param {AuctionObjectUpdateArgs} args - Arguments to update one AuctionObject.
     * @example
     * // Update one AuctionObject
     * const auctionObject = await prisma.auctionObject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuctionObjectUpdateArgs>(args: SelectSubset<T, AuctionObjectUpdateArgs<ExtArgs>>): Prisma__AuctionObjectClient<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuctionObjects.
     * @param {AuctionObjectDeleteManyArgs} args - Arguments to filter AuctionObjects to delete.
     * @example
     * // Delete a few AuctionObjects
     * const { count } = await prisma.auctionObject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuctionObjectDeleteManyArgs>(args?: SelectSubset<T, AuctionObjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuctionObjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionObjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuctionObjects
     * const auctionObject = await prisma.auctionObject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuctionObjectUpdateManyArgs>(args: SelectSubset<T, AuctionObjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuctionObject.
     * @param {AuctionObjectUpsertArgs} args - Arguments to update or create a AuctionObject.
     * @example
     * // Update or create a AuctionObject
     * const auctionObject = await prisma.auctionObject.upsert({
     *   create: {
     *     // ... data to create a AuctionObject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuctionObject we want to update
     *   }
     * })
     */
    upsert<T extends AuctionObjectUpsertArgs>(args: SelectSubset<T, AuctionObjectUpsertArgs<ExtArgs>>): Prisma__AuctionObjectClient<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuctionObjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionObjectCountArgs} args - Arguments to filter AuctionObjects to count.
     * @example
     * // Count the number of AuctionObjects
     * const count = await prisma.auctionObject.count({
     *   where: {
     *     // ... the filter for the AuctionObjects we want to count
     *   }
     * })
    **/
    count<T extends AuctionObjectCountArgs>(
      args?: Subset<T, AuctionObjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuctionObjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuctionObject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionObjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuctionObjectAggregateArgs>(args: Subset<T, AuctionObjectAggregateArgs>): Prisma.PrismaPromise<GetAuctionObjectAggregateType<T>>

    /**
     * Group by AuctionObject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionObjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuctionObjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuctionObjectGroupByArgs['orderBy'] }
        : { orderBy?: AuctionObjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuctionObjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuctionObjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuctionObject model
   */
  readonly fields: AuctionObjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuctionObject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuctionObjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auction<T extends AuctionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuctionDefaultArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    property<T extends AuctionObject$propertyArgs<ExtArgs> = {}>(args?: Subset<T, AuctionObject$propertyArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuctionObject model
   */ 
  interface AuctionObjectFieldRefs {
    readonly id: FieldRef<"AuctionObject", 'String'>
    readonly auctionId: FieldRef<"AuctionObject", 'String'>
    readonly rawText: FieldRef<"AuctionObject", 'String'>
    readonly objectOrder: FieldRef<"AuctionObject", 'Int'>
    readonly createdAt: FieldRef<"AuctionObject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuctionObject findUnique
   */
  export type AuctionObjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    /**
     * Filter, which AuctionObject to fetch.
     */
    where: AuctionObjectWhereUniqueInput
  }

  /**
   * AuctionObject findUniqueOrThrow
   */
  export type AuctionObjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    /**
     * Filter, which AuctionObject to fetch.
     */
    where: AuctionObjectWhereUniqueInput
  }

  /**
   * AuctionObject findFirst
   */
  export type AuctionObjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    /**
     * Filter, which AuctionObject to fetch.
     */
    where?: AuctionObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuctionObjects to fetch.
     */
    orderBy?: AuctionObjectOrderByWithRelationInput | AuctionObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuctionObjects.
     */
    cursor?: AuctionObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuctionObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuctionObjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuctionObjects.
     */
    distinct?: AuctionObjectScalarFieldEnum | AuctionObjectScalarFieldEnum[]
  }

  /**
   * AuctionObject findFirstOrThrow
   */
  export type AuctionObjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    /**
     * Filter, which AuctionObject to fetch.
     */
    where?: AuctionObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuctionObjects to fetch.
     */
    orderBy?: AuctionObjectOrderByWithRelationInput | AuctionObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuctionObjects.
     */
    cursor?: AuctionObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuctionObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuctionObjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuctionObjects.
     */
    distinct?: AuctionObjectScalarFieldEnum | AuctionObjectScalarFieldEnum[]
  }

  /**
   * AuctionObject findMany
   */
  export type AuctionObjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    /**
     * Filter, which AuctionObjects to fetch.
     */
    where?: AuctionObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuctionObjects to fetch.
     */
    orderBy?: AuctionObjectOrderByWithRelationInput | AuctionObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuctionObjects.
     */
    cursor?: AuctionObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuctionObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuctionObjects.
     */
    skip?: number
    distinct?: AuctionObjectScalarFieldEnum | AuctionObjectScalarFieldEnum[]
  }

  /**
   * AuctionObject create
   */
  export type AuctionObjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    /**
     * The data needed to create a AuctionObject.
     */
    data: XOR<AuctionObjectCreateInput, AuctionObjectUncheckedCreateInput>
  }

  /**
   * AuctionObject createMany
   */
  export type AuctionObjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuctionObjects.
     */
    data: AuctionObjectCreateManyInput | AuctionObjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuctionObject createManyAndReturn
   */
  export type AuctionObjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuctionObjects.
     */
    data: AuctionObjectCreateManyInput | AuctionObjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuctionObject update
   */
  export type AuctionObjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    /**
     * The data needed to update a AuctionObject.
     */
    data: XOR<AuctionObjectUpdateInput, AuctionObjectUncheckedUpdateInput>
    /**
     * Choose, which AuctionObject to update.
     */
    where: AuctionObjectWhereUniqueInput
  }

  /**
   * AuctionObject updateMany
   */
  export type AuctionObjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuctionObjects.
     */
    data: XOR<AuctionObjectUpdateManyMutationInput, AuctionObjectUncheckedUpdateManyInput>
    /**
     * Filter which AuctionObjects to update
     */
    where?: AuctionObjectWhereInput
  }

  /**
   * AuctionObject upsert
   */
  export type AuctionObjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    /**
     * The filter to search for the AuctionObject to update in case it exists.
     */
    where: AuctionObjectWhereUniqueInput
    /**
     * In case the AuctionObject found by the `where` argument doesn't exist, create a new AuctionObject with this data.
     */
    create: XOR<AuctionObjectCreateInput, AuctionObjectUncheckedCreateInput>
    /**
     * In case the AuctionObject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuctionObjectUpdateInput, AuctionObjectUncheckedUpdateInput>
  }

  /**
   * AuctionObject delete
   */
  export type AuctionObjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
    /**
     * Filter which AuctionObject to delete.
     */
    where: AuctionObjectWhereUniqueInput
  }

  /**
   * AuctionObject deleteMany
   */
  export type AuctionObjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuctionObjects to delete
     */
    where?: AuctionObjectWhereInput
  }

  /**
   * AuctionObject.property
   */
  export type AuctionObject$propertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    where?: PropertyWhereInput
  }

  /**
   * AuctionObject without action
   */
  export type AuctionObjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionObject
     */
    select?: AuctionObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionObjectInclude<ExtArgs> | null
  }


  /**
   * Model Property
   */

  export type AggregateProperty = {
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  export type PropertyAvgAggregateOutputType = {
    classificationConfidence: Decimal | null
    estimatedValueChf: Decimal | null
    valueConfidence: Decimal | null
  }

  export type PropertySumAggregateOutputType = {
    classificationConfidence: Decimal | null
    estimatedValueChf: Decimal | null
    valueConfidence: Decimal | null
  }

  export type PropertyMinAggregateOutputType = {
    id: string | null
    auctionObjectId: string | null
    propertyType: string | null
    classificationConfidence: Decimal | null
    estimatedValueChf: Decimal | null
    valueConfidence: Decimal | null
    address: string | null
    canton: string | null
    municipality: string | null
    sourceLanguage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyMaxAggregateOutputType = {
    id: string | null
    auctionObjectId: string | null
    propertyType: string | null
    classificationConfidence: Decimal | null
    estimatedValueChf: Decimal | null
    valueConfidence: Decimal | null
    address: string | null
    canton: string | null
    municipality: string | null
    sourceLanguage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyCountAggregateOutputType = {
    id: number
    auctionObjectId: number
    propertyType: number
    classificationConfidence: number
    estimatedValueChf: number
    valueConfidence: number
    address: number
    canton: number
    municipality: number
    sourceLanguage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PropertyAvgAggregateInputType = {
    classificationConfidence?: true
    estimatedValueChf?: true
    valueConfidence?: true
  }

  export type PropertySumAggregateInputType = {
    classificationConfidence?: true
    estimatedValueChf?: true
    valueConfidence?: true
  }

  export type PropertyMinAggregateInputType = {
    id?: true
    auctionObjectId?: true
    propertyType?: true
    classificationConfidence?: true
    estimatedValueChf?: true
    valueConfidence?: true
    address?: true
    canton?: true
    municipality?: true
    sourceLanguage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyMaxAggregateInputType = {
    id?: true
    auctionObjectId?: true
    propertyType?: true
    classificationConfidence?: true
    estimatedValueChf?: true
    valueConfidence?: true
    address?: true
    canton?: true
    municipality?: true
    sourceLanguage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyCountAggregateInputType = {
    id?: true
    auctionObjectId?: true
    propertyType?: true
    classificationConfidence?: true
    estimatedValueChf?: true
    valueConfidence?: true
    address?: true
    canton?: true
    municipality?: true
    sourceLanguage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Property to aggregate.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Properties
    **/
    _count?: true | PropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyMaxAggregateInputType
  }

  export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProperty[P]>
      : GetScalarType<T[P], AggregateProperty[P]>
  }




  export type PropertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithAggregationInput | PropertyOrderByWithAggregationInput[]
    by: PropertyScalarFieldEnum[] | PropertyScalarFieldEnum
    having?: PropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyCountAggregateInputType | true
    _avg?: PropertyAvgAggregateInputType
    _sum?: PropertySumAggregateInputType
    _min?: PropertyMinAggregateInputType
    _max?: PropertyMaxAggregateInputType
  }

  export type PropertyGroupByOutputType = {
    id: string
    auctionObjectId: string
    propertyType: string
    classificationConfidence: Decimal | null
    estimatedValueChf: Decimal | null
    valueConfidence: Decimal | null
    address: string | null
    canton: string | null
    municipality: string | null
    sourceLanguage: string
    createdAt: Date
    updatedAt: Date
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  type GetPropertyGroupByPayload<T extends PropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyGroupByOutputType[P]>
        }
      >
    >


  export type PropertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    auctionObjectId?: boolean
    propertyType?: boolean
    classificationConfidence?: boolean
    estimatedValueChf?: boolean
    valueConfidence?: boolean
    address?: boolean
    canton?: boolean
    municipality?: boolean
    sourceLanguage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    auctionObject?: boolean | AuctionObjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["property"]>

  export type PropertySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    auctionObjectId?: boolean
    propertyType?: boolean
    classificationConfidence?: boolean
    estimatedValueChf?: boolean
    valueConfidence?: boolean
    address?: boolean
    canton?: boolean
    municipality?: boolean
    sourceLanguage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    auctionObject?: boolean | AuctionObjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["property"]>

  export type PropertySelectScalar = {
    id?: boolean
    auctionObjectId?: boolean
    propertyType?: boolean
    classificationConfidence?: boolean
    estimatedValueChf?: boolean
    valueConfidence?: boolean
    address?: boolean
    canton?: boolean
    municipality?: boolean
    sourceLanguage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PropertyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auctionObject?: boolean | AuctionObjectDefaultArgs<ExtArgs>
  }
  export type PropertyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auctionObject?: boolean | AuctionObjectDefaultArgs<ExtArgs>
  }

  export type $PropertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Property"
    objects: {
      auctionObject: Prisma.$AuctionObjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      auctionObjectId: string
      propertyType: string
      classificationConfidence: Prisma.Decimal | null
      estimatedValueChf: Prisma.Decimal | null
      valueConfidence: Prisma.Decimal | null
      address: string | null
      canton: string | null
      municipality: string | null
      sourceLanguage: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["property"]>
    composites: {}
  }

  type PropertyGetPayload<S extends boolean | null | undefined | PropertyDefaultArgs> = $Result.GetResult<Prisma.$PropertyPayload, S>

  type PropertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PropertyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PropertyCountAggregateInputType | true
    }

  export interface PropertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Property'], meta: { name: 'Property' } }
    /**
     * Find zero or one Property that matches the filter.
     * @param {PropertyFindUniqueArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PropertyFindUniqueArgs>(args: SelectSubset<T, PropertyFindUniqueArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Property that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PropertyFindUniqueOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PropertyFindUniqueOrThrowArgs>(args: SelectSubset<T, PropertyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Property that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PropertyFindFirstArgs>(args?: SelectSubset<T, PropertyFindFirstArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Property that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PropertyFindFirstOrThrowArgs>(args?: SelectSubset<T, PropertyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Properties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Properties
     * const properties = await prisma.property.findMany()
     * 
     * // Get first 10 Properties
     * const properties = await prisma.property.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyWithIdOnly = await prisma.property.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PropertyFindManyArgs>(args?: SelectSubset<T, PropertyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Property.
     * @param {PropertyCreateArgs} args - Arguments to create a Property.
     * @example
     * // Create one Property
     * const Property = await prisma.property.create({
     *   data: {
     *     // ... data to create a Property
     *   }
     * })
     * 
     */
    create<T extends PropertyCreateArgs>(args: SelectSubset<T, PropertyCreateArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Properties.
     * @param {PropertyCreateManyArgs} args - Arguments to create many Properties.
     * @example
     * // Create many Properties
     * const property = await prisma.property.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PropertyCreateManyArgs>(args?: SelectSubset<T, PropertyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Properties and returns the data saved in the database.
     * @param {PropertyCreateManyAndReturnArgs} args - Arguments to create many Properties.
     * @example
     * // Create many Properties
     * const property = await prisma.property.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Properties and only return the `id`
     * const propertyWithIdOnly = await prisma.property.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PropertyCreateManyAndReturnArgs>(args?: SelectSubset<T, PropertyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Property.
     * @param {PropertyDeleteArgs} args - Arguments to delete one Property.
     * @example
     * // Delete one Property
     * const Property = await prisma.property.delete({
     *   where: {
     *     // ... filter to delete one Property
     *   }
     * })
     * 
     */
    delete<T extends PropertyDeleteArgs>(args: SelectSubset<T, PropertyDeleteArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Property.
     * @param {PropertyUpdateArgs} args - Arguments to update one Property.
     * @example
     * // Update one Property
     * const property = await prisma.property.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PropertyUpdateArgs>(args: SelectSubset<T, PropertyUpdateArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Properties.
     * @param {PropertyDeleteManyArgs} args - Arguments to filter Properties to delete.
     * @example
     * // Delete a few Properties
     * const { count } = await prisma.property.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PropertyDeleteManyArgs>(args?: SelectSubset<T, PropertyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PropertyUpdateManyArgs>(args: SelectSubset<T, PropertyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Property.
     * @param {PropertyUpsertArgs} args - Arguments to update or create a Property.
     * @example
     * // Update or create a Property
     * const property = await prisma.property.upsert({
     *   create: {
     *     // ... data to create a Property
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Property we want to update
     *   }
     * })
     */
    upsert<T extends PropertyUpsertArgs>(args: SelectSubset<T, PropertyUpsertArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyCountArgs} args - Arguments to filter Properties to count.
     * @example
     * // Count the number of Properties
     * const count = await prisma.property.count({
     *   where: {
     *     // ... the filter for the Properties we want to count
     *   }
     * })
    **/
    count<T extends PropertyCountArgs>(
      args?: Subset<T, PropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyAggregateArgs>(args: Subset<T, PropertyAggregateArgs>): Prisma.PrismaPromise<GetPropertyAggregateType<T>>

    /**
     * Group by Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyGroupByArgs['orderBy'] }
        : { orderBy?: PropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Property model
   */
  readonly fields: PropertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Property.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auctionObject<T extends AuctionObjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuctionObjectDefaultArgs<ExtArgs>>): Prisma__AuctionObjectClient<$Result.GetResult<Prisma.$AuctionObjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Property model
   */ 
  interface PropertyFieldRefs {
    readonly id: FieldRef<"Property", 'String'>
    readonly auctionObjectId: FieldRef<"Property", 'String'>
    readonly propertyType: FieldRef<"Property", 'String'>
    readonly classificationConfidence: FieldRef<"Property", 'Decimal'>
    readonly estimatedValueChf: FieldRef<"Property", 'Decimal'>
    readonly valueConfidence: FieldRef<"Property", 'Decimal'>
    readonly address: FieldRef<"Property", 'String'>
    readonly canton: FieldRef<"Property", 'String'>
    readonly municipality: FieldRef<"Property", 'String'>
    readonly sourceLanguage: FieldRef<"Property", 'String'>
    readonly createdAt: FieldRef<"Property", 'DateTime'>
    readonly updatedAt: FieldRef<"Property", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Property findUnique
   */
  export type PropertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findUniqueOrThrow
   */
  export type PropertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findFirst
   */
  export type PropertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findFirstOrThrow
   */
  export type PropertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findMany
   */
  export type PropertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Properties to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property create
   */
  export type PropertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to create a Property.
     */
    data: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
  }

  /**
   * Property createMany
   */
  export type PropertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Properties.
     */
    data: PropertyCreateManyInput | PropertyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Property createManyAndReturn
   */
  export type PropertyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Properties.
     */
    data: PropertyCreateManyInput | PropertyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Property update
   */
  export type PropertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to update a Property.
     */
    data: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
    /**
     * Choose, which Property to update.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property updateMany
   */
  export type PropertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Properties.
     */
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyInput>
    /**
     * Filter which Properties to update
     */
    where?: PropertyWhereInput
  }

  /**
   * Property upsert
   */
  export type PropertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The filter to search for the Property to update in case it exists.
     */
    where: PropertyWhereUniqueInput
    /**
     * In case the Property found by the `where` argument doesn't exist, create a new Property with this data.
     */
    create: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
    /**
     * In case the Property was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
  }

  /**
   * Property delete
   */
  export type PropertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter which Property to delete.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property deleteMany
   */
  export type PropertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Properties to delete
     */
    where?: PropertyWhereInput
  }

  /**
   * Property without action
   */
  export type PropertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ShabPublicationScalarFieldEnum: {
    id: 'id',
    publishDate: 'publishDate',
    xmlContent: 'xmlContent',
    canton: 'canton',
    rubric: 'rubric',
    subRubric: 'subRubric',
    officialLanguage: 'officialLanguage',
    processingStatus: 'processingStatus',
    createdAt: 'createdAt',
    processedAt: 'processedAt'
  };

  export type ShabPublicationScalarFieldEnum = (typeof ShabPublicationScalarFieldEnum)[keyof typeof ShabPublicationScalarFieldEnum]


  export const AuctionScalarFieldEnum: {
    id: 'id',
    shabPublicationId: 'shabPublicationId',
    auctionDate: 'auctionDate',
    auctionLocation: 'auctionLocation',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AuctionScalarFieldEnum = (typeof AuctionScalarFieldEnum)[keyof typeof AuctionScalarFieldEnum]


  export const AuctionObjectScalarFieldEnum: {
    id: 'id',
    auctionId: 'auctionId',
    rawText: 'rawText',
    objectOrder: 'objectOrder',
    createdAt: 'createdAt'
  };

  export type AuctionObjectScalarFieldEnum = (typeof AuctionObjectScalarFieldEnum)[keyof typeof AuctionObjectScalarFieldEnum]


  export const PropertyScalarFieldEnum: {
    id: 'id',
    auctionObjectId: 'auctionObjectId',
    propertyType: 'propertyType',
    classificationConfidence: 'classificationConfidence',
    estimatedValueChf: 'estimatedValueChf',
    valueConfidence: 'valueConfidence',
    address: 'address',
    canton: 'canton',
    municipality: 'municipality',
    sourceLanguage: 'sourceLanguage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PropertyScalarFieldEnum = (typeof PropertyScalarFieldEnum)[keyof typeof PropertyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ShabPublicationWhereInput = {
    AND?: ShabPublicationWhereInput | ShabPublicationWhereInput[]
    OR?: ShabPublicationWhereInput[]
    NOT?: ShabPublicationWhereInput | ShabPublicationWhereInput[]
    id?: StringFilter<"ShabPublication"> | string
    publishDate?: DateTimeFilter<"ShabPublication"> | Date | string
    xmlContent?: StringFilter<"ShabPublication"> | string
    canton?: StringFilter<"ShabPublication"> | string
    rubric?: StringFilter<"ShabPublication"> | string
    subRubric?: StringFilter<"ShabPublication"> | string
    officialLanguage?: StringFilter<"ShabPublication"> | string
    processingStatus?: StringFilter<"ShabPublication"> | string
    createdAt?: DateTimeFilter<"ShabPublication"> | Date | string
    processedAt?: DateTimeNullableFilter<"ShabPublication"> | Date | string | null
    auctions?: AuctionListRelationFilter
  }

  export type ShabPublicationOrderByWithRelationInput = {
    id?: SortOrder
    publishDate?: SortOrder
    xmlContent?: SortOrder
    canton?: SortOrder
    rubric?: SortOrder
    subRubric?: SortOrder
    officialLanguage?: SortOrder
    processingStatus?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    auctions?: AuctionOrderByRelationAggregateInput
  }

  export type ShabPublicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShabPublicationWhereInput | ShabPublicationWhereInput[]
    OR?: ShabPublicationWhereInput[]
    NOT?: ShabPublicationWhereInput | ShabPublicationWhereInput[]
    publishDate?: DateTimeFilter<"ShabPublication"> | Date | string
    xmlContent?: StringFilter<"ShabPublication"> | string
    canton?: StringFilter<"ShabPublication"> | string
    rubric?: StringFilter<"ShabPublication"> | string
    subRubric?: StringFilter<"ShabPublication"> | string
    officialLanguage?: StringFilter<"ShabPublication"> | string
    processingStatus?: StringFilter<"ShabPublication"> | string
    createdAt?: DateTimeFilter<"ShabPublication"> | Date | string
    processedAt?: DateTimeNullableFilter<"ShabPublication"> | Date | string | null
    auctions?: AuctionListRelationFilter
  }, "id">

  export type ShabPublicationOrderByWithAggregationInput = {
    id?: SortOrder
    publishDate?: SortOrder
    xmlContent?: SortOrder
    canton?: SortOrder
    rubric?: SortOrder
    subRubric?: SortOrder
    officialLanguage?: SortOrder
    processingStatus?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    _count?: ShabPublicationCountOrderByAggregateInput
    _max?: ShabPublicationMaxOrderByAggregateInput
    _min?: ShabPublicationMinOrderByAggregateInput
  }

  export type ShabPublicationScalarWhereWithAggregatesInput = {
    AND?: ShabPublicationScalarWhereWithAggregatesInput | ShabPublicationScalarWhereWithAggregatesInput[]
    OR?: ShabPublicationScalarWhereWithAggregatesInput[]
    NOT?: ShabPublicationScalarWhereWithAggregatesInput | ShabPublicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShabPublication"> | string
    publishDate?: DateTimeWithAggregatesFilter<"ShabPublication"> | Date | string
    xmlContent?: StringWithAggregatesFilter<"ShabPublication"> | string
    canton?: StringWithAggregatesFilter<"ShabPublication"> | string
    rubric?: StringWithAggregatesFilter<"ShabPublication"> | string
    subRubric?: StringWithAggregatesFilter<"ShabPublication"> | string
    officialLanguage?: StringWithAggregatesFilter<"ShabPublication"> | string
    processingStatus?: StringWithAggregatesFilter<"ShabPublication"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ShabPublication"> | Date | string
    processedAt?: DateTimeNullableWithAggregatesFilter<"ShabPublication"> | Date | string | null
  }

  export type AuctionWhereInput = {
    AND?: AuctionWhereInput | AuctionWhereInput[]
    OR?: AuctionWhereInput[]
    NOT?: AuctionWhereInput | AuctionWhereInput[]
    id?: StringFilter<"Auction"> | string
    shabPublicationId?: StringFilter<"Auction"> | string
    auctionDate?: DateTimeFilter<"Auction"> | Date | string
    auctionLocation?: StringFilter<"Auction"> | string
    status?: StringFilter<"Auction"> | string
    createdAt?: DateTimeFilter<"Auction"> | Date | string
    updatedAt?: DateTimeFilter<"Auction"> | Date | string
    shabPublication?: XOR<ShabPublicationRelationFilter, ShabPublicationWhereInput>
    auctionObjects?: AuctionObjectListRelationFilter
  }

  export type AuctionOrderByWithRelationInput = {
    id?: SortOrder
    shabPublicationId?: SortOrder
    auctionDate?: SortOrder
    auctionLocation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shabPublication?: ShabPublicationOrderByWithRelationInput
    auctionObjects?: AuctionObjectOrderByRelationAggregateInput
  }

  export type AuctionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuctionWhereInput | AuctionWhereInput[]
    OR?: AuctionWhereInput[]
    NOT?: AuctionWhereInput | AuctionWhereInput[]
    shabPublicationId?: StringFilter<"Auction"> | string
    auctionDate?: DateTimeFilter<"Auction"> | Date | string
    auctionLocation?: StringFilter<"Auction"> | string
    status?: StringFilter<"Auction"> | string
    createdAt?: DateTimeFilter<"Auction"> | Date | string
    updatedAt?: DateTimeFilter<"Auction"> | Date | string
    shabPublication?: XOR<ShabPublicationRelationFilter, ShabPublicationWhereInput>
    auctionObjects?: AuctionObjectListRelationFilter
  }, "id">

  export type AuctionOrderByWithAggregationInput = {
    id?: SortOrder
    shabPublicationId?: SortOrder
    auctionDate?: SortOrder
    auctionLocation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AuctionCountOrderByAggregateInput
    _max?: AuctionMaxOrderByAggregateInput
    _min?: AuctionMinOrderByAggregateInput
  }

  export type AuctionScalarWhereWithAggregatesInput = {
    AND?: AuctionScalarWhereWithAggregatesInput | AuctionScalarWhereWithAggregatesInput[]
    OR?: AuctionScalarWhereWithAggregatesInput[]
    NOT?: AuctionScalarWhereWithAggregatesInput | AuctionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Auction"> | string
    shabPublicationId?: StringWithAggregatesFilter<"Auction"> | string
    auctionDate?: DateTimeWithAggregatesFilter<"Auction"> | Date | string
    auctionLocation?: StringWithAggregatesFilter<"Auction"> | string
    status?: StringWithAggregatesFilter<"Auction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Auction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Auction"> | Date | string
  }

  export type AuctionObjectWhereInput = {
    AND?: AuctionObjectWhereInput | AuctionObjectWhereInput[]
    OR?: AuctionObjectWhereInput[]
    NOT?: AuctionObjectWhereInput | AuctionObjectWhereInput[]
    id?: StringFilter<"AuctionObject"> | string
    auctionId?: StringFilter<"AuctionObject"> | string
    rawText?: StringFilter<"AuctionObject"> | string
    objectOrder?: IntFilter<"AuctionObject"> | number
    createdAt?: DateTimeFilter<"AuctionObject"> | Date | string
    auction?: XOR<AuctionRelationFilter, AuctionWhereInput>
    property?: XOR<PropertyNullableRelationFilter, PropertyWhereInput> | null
  }

  export type AuctionObjectOrderByWithRelationInput = {
    id?: SortOrder
    auctionId?: SortOrder
    rawText?: SortOrder
    objectOrder?: SortOrder
    createdAt?: SortOrder
    auction?: AuctionOrderByWithRelationInput
    property?: PropertyOrderByWithRelationInput
  }

  export type AuctionObjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuctionObjectWhereInput | AuctionObjectWhereInput[]
    OR?: AuctionObjectWhereInput[]
    NOT?: AuctionObjectWhereInput | AuctionObjectWhereInput[]
    auctionId?: StringFilter<"AuctionObject"> | string
    rawText?: StringFilter<"AuctionObject"> | string
    objectOrder?: IntFilter<"AuctionObject"> | number
    createdAt?: DateTimeFilter<"AuctionObject"> | Date | string
    auction?: XOR<AuctionRelationFilter, AuctionWhereInput>
    property?: XOR<PropertyNullableRelationFilter, PropertyWhereInput> | null
  }, "id">

  export type AuctionObjectOrderByWithAggregationInput = {
    id?: SortOrder
    auctionId?: SortOrder
    rawText?: SortOrder
    objectOrder?: SortOrder
    createdAt?: SortOrder
    _count?: AuctionObjectCountOrderByAggregateInput
    _avg?: AuctionObjectAvgOrderByAggregateInput
    _max?: AuctionObjectMaxOrderByAggregateInput
    _min?: AuctionObjectMinOrderByAggregateInput
    _sum?: AuctionObjectSumOrderByAggregateInput
  }

  export type AuctionObjectScalarWhereWithAggregatesInput = {
    AND?: AuctionObjectScalarWhereWithAggregatesInput | AuctionObjectScalarWhereWithAggregatesInput[]
    OR?: AuctionObjectScalarWhereWithAggregatesInput[]
    NOT?: AuctionObjectScalarWhereWithAggregatesInput | AuctionObjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuctionObject"> | string
    auctionId?: StringWithAggregatesFilter<"AuctionObject"> | string
    rawText?: StringWithAggregatesFilter<"AuctionObject"> | string
    objectOrder?: IntWithAggregatesFilter<"AuctionObject"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AuctionObject"> | Date | string
  }

  export type PropertyWhereInput = {
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    id?: StringFilter<"Property"> | string
    auctionObjectId?: StringFilter<"Property"> | string
    propertyType?: StringFilter<"Property"> | string
    classificationConfidence?: DecimalNullableFilter<"Property"> | Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: DecimalNullableFilter<"Property"> | Decimal | DecimalJsLike | number | string | null
    valueConfidence?: DecimalNullableFilter<"Property"> | Decimal | DecimalJsLike | number | string | null
    address?: StringNullableFilter<"Property"> | string | null
    canton?: StringNullableFilter<"Property"> | string | null
    municipality?: StringNullableFilter<"Property"> | string | null
    sourceLanguage?: StringFilter<"Property"> | string
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updatedAt?: DateTimeFilter<"Property"> | Date | string
    auctionObject?: XOR<AuctionObjectRelationFilter, AuctionObjectWhereInput>
  }

  export type PropertyOrderByWithRelationInput = {
    id?: SortOrder
    auctionObjectId?: SortOrder
    propertyType?: SortOrder
    classificationConfidence?: SortOrderInput | SortOrder
    estimatedValueChf?: SortOrderInput | SortOrder
    valueConfidence?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    canton?: SortOrderInput | SortOrder
    municipality?: SortOrderInput | SortOrder
    sourceLanguage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    auctionObject?: AuctionObjectOrderByWithRelationInput
  }

  export type PropertyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    auctionObjectId?: string
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    propertyType?: StringFilter<"Property"> | string
    classificationConfidence?: DecimalNullableFilter<"Property"> | Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: DecimalNullableFilter<"Property"> | Decimal | DecimalJsLike | number | string | null
    valueConfidence?: DecimalNullableFilter<"Property"> | Decimal | DecimalJsLike | number | string | null
    address?: StringNullableFilter<"Property"> | string | null
    canton?: StringNullableFilter<"Property"> | string | null
    municipality?: StringNullableFilter<"Property"> | string | null
    sourceLanguage?: StringFilter<"Property"> | string
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updatedAt?: DateTimeFilter<"Property"> | Date | string
    auctionObject?: XOR<AuctionObjectRelationFilter, AuctionObjectWhereInput>
  }, "id" | "auctionObjectId">

  export type PropertyOrderByWithAggregationInput = {
    id?: SortOrder
    auctionObjectId?: SortOrder
    propertyType?: SortOrder
    classificationConfidence?: SortOrderInput | SortOrder
    estimatedValueChf?: SortOrderInput | SortOrder
    valueConfidence?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    canton?: SortOrderInput | SortOrder
    municipality?: SortOrderInput | SortOrder
    sourceLanguage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PropertyCountOrderByAggregateInput
    _avg?: PropertyAvgOrderByAggregateInput
    _max?: PropertyMaxOrderByAggregateInput
    _min?: PropertyMinOrderByAggregateInput
    _sum?: PropertySumOrderByAggregateInput
  }

  export type PropertyScalarWhereWithAggregatesInput = {
    AND?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    OR?: PropertyScalarWhereWithAggregatesInput[]
    NOT?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Property"> | string
    auctionObjectId?: StringWithAggregatesFilter<"Property"> | string
    propertyType?: StringWithAggregatesFilter<"Property"> | string
    classificationConfidence?: DecimalNullableWithAggregatesFilter<"Property"> | Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: DecimalNullableWithAggregatesFilter<"Property"> | Decimal | DecimalJsLike | number | string | null
    valueConfidence?: DecimalNullableWithAggregatesFilter<"Property"> | Decimal | DecimalJsLike | number | string | null
    address?: StringNullableWithAggregatesFilter<"Property"> | string | null
    canton?: StringNullableWithAggregatesFilter<"Property"> | string | null
    municipality?: StringNullableWithAggregatesFilter<"Property"> | string | null
    sourceLanguage?: StringWithAggregatesFilter<"Property"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
  }

  export type ShabPublicationCreateInput = {
    id: string
    publishDate: Date | string
    xmlContent: string
    canton: string
    rubric: string
    subRubric: string
    officialLanguage: string
    processingStatus?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    auctions?: AuctionCreateNestedManyWithoutShabPublicationInput
  }

  export type ShabPublicationUncheckedCreateInput = {
    id: string
    publishDate: Date | string
    xmlContent: string
    canton: string
    rubric: string
    subRubric: string
    officialLanguage: string
    processingStatus?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    auctions?: AuctionUncheckedCreateNestedManyWithoutShabPublicationInput
  }

  export type ShabPublicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    xmlContent?: StringFieldUpdateOperationsInput | string
    canton?: StringFieldUpdateOperationsInput | string
    rubric?: StringFieldUpdateOperationsInput | string
    subRubric?: StringFieldUpdateOperationsInput | string
    officialLanguage?: StringFieldUpdateOperationsInput | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    auctions?: AuctionUpdateManyWithoutShabPublicationNestedInput
  }

  export type ShabPublicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    xmlContent?: StringFieldUpdateOperationsInput | string
    canton?: StringFieldUpdateOperationsInput | string
    rubric?: StringFieldUpdateOperationsInput | string
    subRubric?: StringFieldUpdateOperationsInput | string
    officialLanguage?: StringFieldUpdateOperationsInput | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    auctions?: AuctionUncheckedUpdateManyWithoutShabPublicationNestedInput
  }

  export type ShabPublicationCreateManyInput = {
    id: string
    publishDate: Date | string
    xmlContent: string
    canton: string
    rubric: string
    subRubric: string
    officialLanguage: string
    processingStatus?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
  }

  export type ShabPublicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    xmlContent?: StringFieldUpdateOperationsInput | string
    canton?: StringFieldUpdateOperationsInput | string
    rubric?: StringFieldUpdateOperationsInput | string
    subRubric?: StringFieldUpdateOperationsInput | string
    officialLanguage?: StringFieldUpdateOperationsInput | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ShabPublicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    xmlContent?: StringFieldUpdateOperationsInput | string
    canton?: StringFieldUpdateOperationsInput | string
    rubric?: StringFieldUpdateOperationsInput | string
    subRubric?: StringFieldUpdateOperationsInput | string
    officialLanguage?: StringFieldUpdateOperationsInput | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuctionCreateInput = {
    id?: string
    auctionDate: Date | string
    auctionLocation: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    shabPublication: ShabPublicationCreateNestedOneWithoutAuctionsInput
    auctionObjects?: AuctionObjectCreateNestedManyWithoutAuctionInput
  }

  export type AuctionUncheckedCreateInput = {
    id?: string
    shabPublicationId: string
    auctionDate: Date | string
    auctionLocation: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    auctionObjects?: AuctionObjectUncheckedCreateNestedManyWithoutAuctionInput
  }

  export type AuctionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionLocation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shabPublication?: ShabPublicationUpdateOneRequiredWithoutAuctionsNestedInput
    auctionObjects?: AuctionObjectUpdateManyWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shabPublicationId?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionLocation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionObjects?: AuctionObjectUncheckedUpdateManyWithoutAuctionNestedInput
  }

  export type AuctionCreateManyInput = {
    id?: string
    shabPublicationId: string
    auctionDate: Date | string
    auctionLocation: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionLocation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shabPublicationId?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionLocation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionObjectCreateInput = {
    id?: string
    rawText: string
    objectOrder: number
    createdAt?: Date | string
    auction: AuctionCreateNestedOneWithoutAuctionObjectsInput
    property?: PropertyCreateNestedOneWithoutAuctionObjectInput
  }

  export type AuctionObjectUncheckedCreateInput = {
    id?: string
    auctionId: string
    rawText: string
    objectOrder: number
    createdAt?: Date | string
    property?: PropertyUncheckedCreateNestedOneWithoutAuctionObjectInput
  }

  export type AuctionObjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rawText?: StringFieldUpdateOperationsInput | string
    objectOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auction?: AuctionUpdateOneRequiredWithoutAuctionObjectsNestedInput
    property?: PropertyUpdateOneWithoutAuctionObjectNestedInput
  }

  export type AuctionObjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionId?: StringFieldUpdateOperationsInput | string
    rawText?: StringFieldUpdateOperationsInput | string
    objectOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: PropertyUncheckedUpdateOneWithoutAuctionObjectNestedInput
  }

  export type AuctionObjectCreateManyInput = {
    id?: string
    auctionId: string
    rawText: string
    objectOrder: number
    createdAt?: Date | string
  }

  export type AuctionObjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rawText?: StringFieldUpdateOperationsInput | string
    objectOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionObjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionId?: StringFieldUpdateOperationsInput | string
    rawText?: StringFieldUpdateOperationsInput | string
    objectOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyCreateInput = {
    id?: string
    propertyType: string
    classificationConfidence?: Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: Decimal | DecimalJsLike | number | string | null
    valueConfidence?: Decimal | DecimalJsLike | number | string | null
    address?: string | null
    canton?: string | null
    municipality?: string | null
    sourceLanguage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    auctionObject: AuctionObjectCreateNestedOneWithoutPropertyInput
  }

  export type PropertyUncheckedCreateInput = {
    id?: string
    auctionObjectId: string
    propertyType: string
    classificationConfidence?: Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: Decimal | DecimalJsLike | number | string | null
    valueConfidence?: Decimal | DecimalJsLike | number | string | null
    address?: string | null
    canton?: string | null
    municipality?: string | null
    sourceLanguage: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    classificationConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    canton?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionObject?: AuctionObjectUpdateOneRequiredWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionObjectId?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    classificationConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    canton?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyCreateManyInput = {
    id?: string
    auctionObjectId: string
    propertyType: string
    classificationConfidence?: Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: Decimal | DecimalJsLike | number | string | null
    valueConfidence?: Decimal | DecimalJsLike | number | string | null
    address?: string | null
    canton?: string | null
    municipality?: string | null
    sourceLanguage: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    classificationConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    canton?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionObjectId?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    classificationConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    canton?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AuctionListRelationFilter = {
    every?: AuctionWhereInput
    some?: AuctionWhereInput
    none?: AuctionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AuctionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShabPublicationCountOrderByAggregateInput = {
    id?: SortOrder
    publishDate?: SortOrder
    xmlContent?: SortOrder
    canton?: SortOrder
    rubric?: SortOrder
    subRubric?: SortOrder
    officialLanguage?: SortOrder
    processingStatus?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
  }

  export type ShabPublicationMaxOrderByAggregateInput = {
    id?: SortOrder
    publishDate?: SortOrder
    xmlContent?: SortOrder
    canton?: SortOrder
    rubric?: SortOrder
    subRubric?: SortOrder
    officialLanguage?: SortOrder
    processingStatus?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
  }

  export type ShabPublicationMinOrderByAggregateInput = {
    id?: SortOrder
    publishDate?: SortOrder
    xmlContent?: SortOrder
    canton?: SortOrder
    rubric?: SortOrder
    subRubric?: SortOrder
    officialLanguage?: SortOrder
    processingStatus?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ShabPublicationRelationFilter = {
    is?: ShabPublicationWhereInput
    isNot?: ShabPublicationWhereInput
  }

  export type AuctionObjectListRelationFilter = {
    every?: AuctionObjectWhereInput
    some?: AuctionObjectWhereInput
    none?: AuctionObjectWhereInput
  }

  export type AuctionObjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuctionCountOrderByAggregateInput = {
    id?: SortOrder
    shabPublicationId?: SortOrder
    auctionDate?: SortOrder
    auctionLocation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuctionMaxOrderByAggregateInput = {
    id?: SortOrder
    shabPublicationId?: SortOrder
    auctionDate?: SortOrder
    auctionLocation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuctionMinOrderByAggregateInput = {
    id?: SortOrder
    shabPublicationId?: SortOrder
    auctionDate?: SortOrder
    auctionLocation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AuctionRelationFilter = {
    is?: AuctionWhereInput
    isNot?: AuctionWhereInput
  }

  export type PropertyNullableRelationFilter = {
    is?: PropertyWhereInput | null
    isNot?: PropertyWhereInput | null
  }

  export type AuctionObjectCountOrderByAggregateInput = {
    id?: SortOrder
    auctionId?: SortOrder
    rawText?: SortOrder
    objectOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type AuctionObjectAvgOrderByAggregateInput = {
    objectOrder?: SortOrder
  }

  export type AuctionObjectMaxOrderByAggregateInput = {
    id?: SortOrder
    auctionId?: SortOrder
    rawText?: SortOrder
    objectOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type AuctionObjectMinOrderByAggregateInput = {
    id?: SortOrder
    auctionId?: SortOrder
    rawText?: SortOrder
    objectOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type AuctionObjectSumOrderByAggregateInput = {
    objectOrder?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AuctionObjectRelationFilter = {
    is?: AuctionObjectWhereInput
    isNot?: AuctionObjectWhereInput
  }

  export type PropertyCountOrderByAggregateInput = {
    id?: SortOrder
    auctionObjectId?: SortOrder
    propertyType?: SortOrder
    classificationConfidence?: SortOrder
    estimatedValueChf?: SortOrder
    valueConfidence?: SortOrder
    address?: SortOrder
    canton?: SortOrder
    municipality?: SortOrder
    sourceLanguage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertyAvgOrderByAggregateInput = {
    classificationConfidence?: SortOrder
    estimatedValueChf?: SortOrder
    valueConfidence?: SortOrder
  }

  export type PropertyMaxOrderByAggregateInput = {
    id?: SortOrder
    auctionObjectId?: SortOrder
    propertyType?: SortOrder
    classificationConfidence?: SortOrder
    estimatedValueChf?: SortOrder
    valueConfidence?: SortOrder
    address?: SortOrder
    canton?: SortOrder
    municipality?: SortOrder
    sourceLanguage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertyMinOrderByAggregateInput = {
    id?: SortOrder
    auctionObjectId?: SortOrder
    propertyType?: SortOrder
    classificationConfidence?: SortOrder
    estimatedValueChf?: SortOrder
    valueConfidence?: SortOrder
    address?: SortOrder
    canton?: SortOrder
    municipality?: SortOrder
    sourceLanguage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertySumOrderByAggregateInput = {
    classificationConfidence?: SortOrder
    estimatedValueChf?: SortOrder
    valueConfidence?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type AuctionCreateNestedManyWithoutShabPublicationInput = {
    create?: XOR<AuctionCreateWithoutShabPublicationInput, AuctionUncheckedCreateWithoutShabPublicationInput> | AuctionCreateWithoutShabPublicationInput[] | AuctionUncheckedCreateWithoutShabPublicationInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutShabPublicationInput | AuctionCreateOrConnectWithoutShabPublicationInput[]
    createMany?: AuctionCreateManyShabPublicationInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type AuctionUncheckedCreateNestedManyWithoutShabPublicationInput = {
    create?: XOR<AuctionCreateWithoutShabPublicationInput, AuctionUncheckedCreateWithoutShabPublicationInput> | AuctionCreateWithoutShabPublicationInput[] | AuctionUncheckedCreateWithoutShabPublicationInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutShabPublicationInput | AuctionCreateOrConnectWithoutShabPublicationInput[]
    createMany?: AuctionCreateManyShabPublicationInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AuctionUpdateManyWithoutShabPublicationNestedInput = {
    create?: XOR<AuctionCreateWithoutShabPublicationInput, AuctionUncheckedCreateWithoutShabPublicationInput> | AuctionCreateWithoutShabPublicationInput[] | AuctionUncheckedCreateWithoutShabPublicationInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutShabPublicationInput | AuctionCreateOrConnectWithoutShabPublicationInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutShabPublicationInput | AuctionUpsertWithWhereUniqueWithoutShabPublicationInput[]
    createMany?: AuctionCreateManyShabPublicationInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutShabPublicationInput | AuctionUpdateWithWhereUniqueWithoutShabPublicationInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutShabPublicationInput | AuctionUpdateManyWithWhereWithoutShabPublicationInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type AuctionUncheckedUpdateManyWithoutShabPublicationNestedInput = {
    create?: XOR<AuctionCreateWithoutShabPublicationInput, AuctionUncheckedCreateWithoutShabPublicationInput> | AuctionCreateWithoutShabPublicationInput[] | AuctionUncheckedCreateWithoutShabPublicationInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutShabPublicationInput | AuctionCreateOrConnectWithoutShabPublicationInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutShabPublicationInput | AuctionUpsertWithWhereUniqueWithoutShabPublicationInput[]
    createMany?: AuctionCreateManyShabPublicationInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutShabPublicationInput | AuctionUpdateWithWhereUniqueWithoutShabPublicationInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutShabPublicationInput | AuctionUpdateManyWithWhereWithoutShabPublicationInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type ShabPublicationCreateNestedOneWithoutAuctionsInput = {
    create?: XOR<ShabPublicationCreateWithoutAuctionsInput, ShabPublicationUncheckedCreateWithoutAuctionsInput>
    connectOrCreate?: ShabPublicationCreateOrConnectWithoutAuctionsInput
    connect?: ShabPublicationWhereUniqueInput
  }

  export type AuctionObjectCreateNestedManyWithoutAuctionInput = {
    create?: XOR<AuctionObjectCreateWithoutAuctionInput, AuctionObjectUncheckedCreateWithoutAuctionInput> | AuctionObjectCreateWithoutAuctionInput[] | AuctionObjectUncheckedCreateWithoutAuctionInput[]
    connectOrCreate?: AuctionObjectCreateOrConnectWithoutAuctionInput | AuctionObjectCreateOrConnectWithoutAuctionInput[]
    createMany?: AuctionObjectCreateManyAuctionInputEnvelope
    connect?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
  }

  export type AuctionObjectUncheckedCreateNestedManyWithoutAuctionInput = {
    create?: XOR<AuctionObjectCreateWithoutAuctionInput, AuctionObjectUncheckedCreateWithoutAuctionInput> | AuctionObjectCreateWithoutAuctionInput[] | AuctionObjectUncheckedCreateWithoutAuctionInput[]
    connectOrCreate?: AuctionObjectCreateOrConnectWithoutAuctionInput | AuctionObjectCreateOrConnectWithoutAuctionInput[]
    createMany?: AuctionObjectCreateManyAuctionInputEnvelope
    connect?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
  }

  export type ShabPublicationUpdateOneRequiredWithoutAuctionsNestedInput = {
    create?: XOR<ShabPublicationCreateWithoutAuctionsInput, ShabPublicationUncheckedCreateWithoutAuctionsInput>
    connectOrCreate?: ShabPublicationCreateOrConnectWithoutAuctionsInput
    upsert?: ShabPublicationUpsertWithoutAuctionsInput
    connect?: ShabPublicationWhereUniqueInput
    update?: XOR<XOR<ShabPublicationUpdateToOneWithWhereWithoutAuctionsInput, ShabPublicationUpdateWithoutAuctionsInput>, ShabPublicationUncheckedUpdateWithoutAuctionsInput>
  }

  export type AuctionObjectUpdateManyWithoutAuctionNestedInput = {
    create?: XOR<AuctionObjectCreateWithoutAuctionInput, AuctionObjectUncheckedCreateWithoutAuctionInput> | AuctionObjectCreateWithoutAuctionInput[] | AuctionObjectUncheckedCreateWithoutAuctionInput[]
    connectOrCreate?: AuctionObjectCreateOrConnectWithoutAuctionInput | AuctionObjectCreateOrConnectWithoutAuctionInput[]
    upsert?: AuctionObjectUpsertWithWhereUniqueWithoutAuctionInput | AuctionObjectUpsertWithWhereUniqueWithoutAuctionInput[]
    createMany?: AuctionObjectCreateManyAuctionInputEnvelope
    set?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
    disconnect?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
    delete?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
    connect?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
    update?: AuctionObjectUpdateWithWhereUniqueWithoutAuctionInput | AuctionObjectUpdateWithWhereUniqueWithoutAuctionInput[]
    updateMany?: AuctionObjectUpdateManyWithWhereWithoutAuctionInput | AuctionObjectUpdateManyWithWhereWithoutAuctionInput[]
    deleteMany?: AuctionObjectScalarWhereInput | AuctionObjectScalarWhereInput[]
  }

  export type AuctionObjectUncheckedUpdateManyWithoutAuctionNestedInput = {
    create?: XOR<AuctionObjectCreateWithoutAuctionInput, AuctionObjectUncheckedCreateWithoutAuctionInput> | AuctionObjectCreateWithoutAuctionInput[] | AuctionObjectUncheckedCreateWithoutAuctionInput[]
    connectOrCreate?: AuctionObjectCreateOrConnectWithoutAuctionInput | AuctionObjectCreateOrConnectWithoutAuctionInput[]
    upsert?: AuctionObjectUpsertWithWhereUniqueWithoutAuctionInput | AuctionObjectUpsertWithWhereUniqueWithoutAuctionInput[]
    createMany?: AuctionObjectCreateManyAuctionInputEnvelope
    set?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
    disconnect?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
    delete?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
    connect?: AuctionObjectWhereUniqueInput | AuctionObjectWhereUniqueInput[]
    update?: AuctionObjectUpdateWithWhereUniqueWithoutAuctionInput | AuctionObjectUpdateWithWhereUniqueWithoutAuctionInput[]
    updateMany?: AuctionObjectUpdateManyWithWhereWithoutAuctionInput | AuctionObjectUpdateManyWithWhereWithoutAuctionInput[]
    deleteMany?: AuctionObjectScalarWhereInput | AuctionObjectScalarWhereInput[]
  }

  export type AuctionCreateNestedOneWithoutAuctionObjectsInput = {
    create?: XOR<AuctionCreateWithoutAuctionObjectsInput, AuctionUncheckedCreateWithoutAuctionObjectsInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutAuctionObjectsInput
    connect?: AuctionWhereUniqueInput
  }

  export type PropertyCreateNestedOneWithoutAuctionObjectInput = {
    create?: XOR<PropertyCreateWithoutAuctionObjectInput, PropertyUncheckedCreateWithoutAuctionObjectInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutAuctionObjectInput
    connect?: PropertyWhereUniqueInput
  }

  export type PropertyUncheckedCreateNestedOneWithoutAuctionObjectInput = {
    create?: XOR<PropertyCreateWithoutAuctionObjectInput, PropertyUncheckedCreateWithoutAuctionObjectInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutAuctionObjectInput
    connect?: PropertyWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AuctionUpdateOneRequiredWithoutAuctionObjectsNestedInput = {
    create?: XOR<AuctionCreateWithoutAuctionObjectsInput, AuctionUncheckedCreateWithoutAuctionObjectsInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutAuctionObjectsInput
    upsert?: AuctionUpsertWithoutAuctionObjectsInput
    connect?: AuctionWhereUniqueInput
    update?: XOR<XOR<AuctionUpdateToOneWithWhereWithoutAuctionObjectsInput, AuctionUpdateWithoutAuctionObjectsInput>, AuctionUncheckedUpdateWithoutAuctionObjectsInput>
  }

  export type PropertyUpdateOneWithoutAuctionObjectNestedInput = {
    create?: XOR<PropertyCreateWithoutAuctionObjectInput, PropertyUncheckedCreateWithoutAuctionObjectInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutAuctionObjectInput
    upsert?: PropertyUpsertWithoutAuctionObjectInput
    disconnect?: PropertyWhereInput | boolean
    delete?: PropertyWhereInput | boolean
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutAuctionObjectInput, PropertyUpdateWithoutAuctionObjectInput>, PropertyUncheckedUpdateWithoutAuctionObjectInput>
  }

  export type PropertyUncheckedUpdateOneWithoutAuctionObjectNestedInput = {
    create?: XOR<PropertyCreateWithoutAuctionObjectInput, PropertyUncheckedCreateWithoutAuctionObjectInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutAuctionObjectInput
    upsert?: PropertyUpsertWithoutAuctionObjectInput
    disconnect?: PropertyWhereInput | boolean
    delete?: PropertyWhereInput | boolean
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutAuctionObjectInput, PropertyUpdateWithoutAuctionObjectInput>, PropertyUncheckedUpdateWithoutAuctionObjectInput>
  }

  export type AuctionObjectCreateNestedOneWithoutPropertyInput = {
    create?: XOR<AuctionObjectCreateWithoutPropertyInput, AuctionObjectUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: AuctionObjectCreateOrConnectWithoutPropertyInput
    connect?: AuctionObjectWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AuctionObjectUpdateOneRequiredWithoutPropertyNestedInput = {
    create?: XOR<AuctionObjectCreateWithoutPropertyInput, AuctionObjectUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: AuctionObjectCreateOrConnectWithoutPropertyInput
    upsert?: AuctionObjectUpsertWithoutPropertyInput
    connect?: AuctionObjectWhereUniqueInput
    update?: XOR<XOR<AuctionObjectUpdateToOneWithWhereWithoutPropertyInput, AuctionObjectUpdateWithoutPropertyInput>, AuctionObjectUncheckedUpdateWithoutPropertyInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type AuctionCreateWithoutShabPublicationInput = {
    id?: string
    auctionDate: Date | string
    auctionLocation: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    auctionObjects?: AuctionObjectCreateNestedManyWithoutAuctionInput
  }

  export type AuctionUncheckedCreateWithoutShabPublicationInput = {
    id?: string
    auctionDate: Date | string
    auctionLocation: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    auctionObjects?: AuctionObjectUncheckedCreateNestedManyWithoutAuctionInput
  }

  export type AuctionCreateOrConnectWithoutShabPublicationInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutShabPublicationInput, AuctionUncheckedCreateWithoutShabPublicationInput>
  }

  export type AuctionCreateManyShabPublicationInputEnvelope = {
    data: AuctionCreateManyShabPublicationInput | AuctionCreateManyShabPublicationInput[]
    skipDuplicates?: boolean
  }

  export type AuctionUpsertWithWhereUniqueWithoutShabPublicationInput = {
    where: AuctionWhereUniqueInput
    update: XOR<AuctionUpdateWithoutShabPublicationInput, AuctionUncheckedUpdateWithoutShabPublicationInput>
    create: XOR<AuctionCreateWithoutShabPublicationInput, AuctionUncheckedCreateWithoutShabPublicationInput>
  }

  export type AuctionUpdateWithWhereUniqueWithoutShabPublicationInput = {
    where: AuctionWhereUniqueInput
    data: XOR<AuctionUpdateWithoutShabPublicationInput, AuctionUncheckedUpdateWithoutShabPublicationInput>
  }

  export type AuctionUpdateManyWithWhereWithoutShabPublicationInput = {
    where: AuctionScalarWhereInput
    data: XOR<AuctionUpdateManyMutationInput, AuctionUncheckedUpdateManyWithoutShabPublicationInput>
  }

  export type AuctionScalarWhereInput = {
    AND?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
    OR?: AuctionScalarWhereInput[]
    NOT?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
    id?: StringFilter<"Auction"> | string
    shabPublicationId?: StringFilter<"Auction"> | string
    auctionDate?: DateTimeFilter<"Auction"> | Date | string
    auctionLocation?: StringFilter<"Auction"> | string
    status?: StringFilter<"Auction"> | string
    createdAt?: DateTimeFilter<"Auction"> | Date | string
    updatedAt?: DateTimeFilter<"Auction"> | Date | string
  }

  export type ShabPublicationCreateWithoutAuctionsInput = {
    id: string
    publishDate: Date | string
    xmlContent: string
    canton: string
    rubric: string
    subRubric: string
    officialLanguage: string
    processingStatus?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
  }

  export type ShabPublicationUncheckedCreateWithoutAuctionsInput = {
    id: string
    publishDate: Date | string
    xmlContent: string
    canton: string
    rubric: string
    subRubric: string
    officialLanguage: string
    processingStatus?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
  }

  export type ShabPublicationCreateOrConnectWithoutAuctionsInput = {
    where: ShabPublicationWhereUniqueInput
    create: XOR<ShabPublicationCreateWithoutAuctionsInput, ShabPublicationUncheckedCreateWithoutAuctionsInput>
  }

  export type AuctionObjectCreateWithoutAuctionInput = {
    id?: string
    rawText: string
    objectOrder: number
    createdAt?: Date | string
    property?: PropertyCreateNestedOneWithoutAuctionObjectInput
  }

  export type AuctionObjectUncheckedCreateWithoutAuctionInput = {
    id?: string
    rawText: string
    objectOrder: number
    createdAt?: Date | string
    property?: PropertyUncheckedCreateNestedOneWithoutAuctionObjectInput
  }

  export type AuctionObjectCreateOrConnectWithoutAuctionInput = {
    where: AuctionObjectWhereUniqueInput
    create: XOR<AuctionObjectCreateWithoutAuctionInput, AuctionObjectUncheckedCreateWithoutAuctionInput>
  }

  export type AuctionObjectCreateManyAuctionInputEnvelope = {
    data: AuctionObjectCreateManyAuctionInput | AuctionObjectCreateManyAuctionInput[]
    skipDuplicates?: boolean
  }

  export type ShabPublicationUpsertWithoutAuctionsInput = {
    update: XOR<ShabPublicationUpdateWithoutAuctionsInput, ShabPublicationUncheckedUpdateWithoutAuctionsInput>
    create: XOR<ShabPublicationCreateWithoutAuctionsInput, ShabPublicationUncheckedCreateWithoutAuctionsInput>
    where?: ShabPublicationWhereInput
  }

  export type ShabPublicationUpdateToOneWithWhereWithoutAuctionsInput = {
    where?: ShabPublicationWhereInput
    data: XOR<ShabPublicationUpdateWithoutAuctionsInput, ShabPublicationUncheckedUpdateWithoutAuctionsInput>
  }

  export type ShabPublicationUpdateWithoutAuctionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    xmlContent?: StringFieldUpdateOperationsInput | string
    canton?: StringFieldUpdateOperationsInput | string
    rubric?: StringFieldUpdateOperationsInput | string
    subRubric?: StringFieldUpdateOperationsInput | string
    officialLanguage?: StringFieldUpdateOperationsInput | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ShabPublicationUncheckedUpdateWithoutAuctionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    xmlContent?: StringFieldUpdateOperationsInput | string
    canton?: StringFieldUpdateOperationsInput | string
    rubric?: StringFieldUpdateOperationsInput | string
    subRubric?: StringFieldUpdateOperationsInput | string
    officialLanguage?: StringFieldUpdateOperationsInput | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuctionObjectUpsertWithWhereUniqueWithoutAuctionInput = {
    where: AuctionObjectWhereUniqueInput
    update: XOR<AuctionObjectUpdateWithoutAuctionInput, AuctionObjectUncheckedUpdateWithoutAuctionInput>
    create: XOR<AuctionObjectCreateWithoutAuctionInput, AuctionObjectUncheckedCreateWithoutAuctionInput>
  }

  export type AuctionObjectUpdateWithWhereUniqueWithoutAuctionInput = {
    where: AuctionObjectWhereUniqueInput
    data: XOR<AuctionObjectUpdateWithoutAuctionInput, AuctionObjectUncheckedUpdateWithoutAuctionInput>
  }

  export type AuctionObjectUpdateManyWithWhereWithoutAuctionInput = {
    where: AuctionObjectScalarWhereInput
    data: XOR<AuctionObjectUpdateManyMutationInput, AuctionObjectUncheckedUpdateManyWithoutAuctionInput>
  }

  export type AuctionObjectScalarWhereInput = {
    AND?: AuctionObjectScalarWhereInput | AuctionObjectScalarWhereInput[]
    OR?: AuctionObjectScalarWhereInput[]
    NOT?: AuctionObjectScalarWhereInput | AuctionObjectScalarWhereInput[]
    id?: StringFilter<"AuctionObject"> | string
    auctionId?: StringFilter<"AuctionObject"> | string
    rawText?: StringFilter<"AuctionObject"> | string
    objectOrder?: IntFilter<"AuctionObject"> | number
    createdAt?: DateTimeFilter<"AuctionObject"> | Date | string
  }

  export type AuctionCreateWithoutAuctionObjectsInput = {
    id?: string
    auctionDate: Date | string
    auctionLocation: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    shabPublication: ShabPublicationCreateNestedOneWithoutAuctionsInput
  }

  export type AuctionUncheckedCreateWithoutAuctionObjectsInput = {
    id?: string
    shabPublicationId: string
    auctionDate: Date | string
    auctionLocation: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionCreateOrConnectWithoutAuctionObjectsInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutAuctionObjectsInput, AuctionUncheckedCreateWithoutAuctionObjectsInput>
  }

  export type PropertyCreateWithoutAuctionObjectInput = {
    id?: string
    propertyType: string
    classificationConfidence?: Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: Decimal | DecimalJsLike | number | string | null
    valueConfidence?: Decimal | DecimalJsLike | number | string | null
    address?: string | null
    canton?: string | null
    municipality?: string | null
    sourceLanguage: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyUncheckedCreateWithoutAuctionObjectInput = {
    id?: string
    propertyType: string
    classificationConfidence?: Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: Decimal | DecimalJsLike | number | string | null
    valueConfidence?: Decimal | DecimalJsLike | number | string | null
    address?: string | null
    canton?: string | null
    municipality?: string | null
    sourceLanguage: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyCreateOrConnectWithoutAuctionObjectInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutAuctionObjectInput, PropertyUncheckedCreateWithoutAuctionObjectInput>
  }

  export type AuctionUpsertWithoutAuctionObjectsInput = {
    update: XOR<AuctionUpdateWithoutAuctionObjectsInput, AuctionUncheckedUpdateWithoutAuctionObjectsInput>
    create: XOR<AuctionCreateWithoutAuctionObjectsInput, AuctionUncheckedCreateWithoutAuctionObjectsInput>
    where?: AuctionWhereInput
  }

  export type AuctionUpdateToOneWithWhereWithoutAuctionObjectsInput = {
    where?: AuctionWhereInput
    data: XOR<AuctionUpdateWithoutAuctionObjectsInput, AuctionUncheckedUpdateWithoutAuctionObjectsInput>
  }

  export type AuctionUpdateWithoutAuctionObjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionLocation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shabPublication?: ShabPublicationUpdateOneRequiredWithoutAuctionsNestedInput
  }

  export type AuctionUncheckedUpdateWithoutAuctionObjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shabPublicationId?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionLocation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUpsertWithoutAuctionObjectInput = {
    update: XOR<PropertyUpdateWithoutAuctionObjectInput, PropertyUncheckedUpdateWithoutAuctionObjectInput>
    create: XOR<PropertyCreateWithoutAuctionObjectInput, PropertyUncheckedCreateWithoutAuctionObjectInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutAuctionObjectInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutAuctionObjectInput, PropertyUncheckedUpdateWithoutAuctionObjectInput>
  }

  export type PropertyUpdateWithoutAuctionObjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    classificationConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    canton?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUncheckedUpdateWithoutAuctionObjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    classificationConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedValueChf?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    canton?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionObjectCreateWithoutPropertyInput = {
    id?: string
    rawText: string
    objectOrder: number
    createdAt?: Date | string
    auction: AuctionCreateNestedOneWithoutAuctionObjectsInput
  }

  export type AuctionObjectUncheckedCreateWithoutPropertyInput = {
    id?: string
    auctionId: string
    rawText: string
    objectOrder: number
    createdAt?: Date | string
  }

  export type AuctionObjectCreateOrConnectWithoutPropertyInput = {
    where: AuctionObjectWhereUniqueInput
    create: XOR<AuctionObjectCreateWithoutPropertyInput, AuctionObjectUncheckedCreateWithoutPropertyInput>
  }

  export type AuctionObjectUpsertWithoutPropertyInput = {
    update: XOR<AuctionObjectUpdateWithoutPropertyInput, AuctionObjectUncheckedUpdateWithoutPropertyInput>
    create: XOR<AuctionObjectCreateWithoutPropertyInput, AuctionObjectUncheckedCreateWithoutPropertyInput>
    where?: AuctionObjectWhereInput
  }

  export type AuctionObjectUpdateToOneWithWhereWithoutPropertyInput = {
    where?: AuctionObjectWhereInput
    data: XOR<AuctionObjectUpdateWithoutPropertyInput, AuctionObjectUncheckedUpdateWithoutPropertyInput>
  }

  export type AuctionObjectUpdateWithoutPropertyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rawText?: StringFieldUpdateOperationsInput | string
    objectOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auction?: AuctionUpdateOneRequiredWithoutAuctionObjectsNestedInput
  }

  export type AuctionObjectUncheckedUpdateWithoutPropertyInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionId?: StringFieldUpdateOperationsInput | string
    rawText?: StringFieldUpdateOperationsInput | string
    objectOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionCreateManyShabPublicationInput = {
    id?: string
    auctionDate: Date | string
    auctionLocation: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionUpdateWithoutShabPublicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionLocation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionObjects?: AuctionObjectUpdateManyWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateWithoutShabPublicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionLocation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionObjects?: AuctionObjectUncheckedUpdateManyWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateManyWithoutShabPublicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auctionLocation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionObjectCreateManyAuctionInput = {
    id?: string
    rawText: string
    objectOrder: number
    createdAt?: Date | string
  }

  export type AuctionObjectUpdateWithoutAuctionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rawText?: StringFieldUpdateOperationsInput | string
    objectOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: PropertyUpdateOneWithoutAuctionObjectNestedInput
  }

  export type AuctionObjectUncheckedUpdateWithoutAuctionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rawText?: StringFieldUpdateOperationsInput | string
    objectOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: PropertyUncheckedUpdateOneWithoutAuctionObjectNestedInput
  }

  export type AuctionObjectUncheckedUpdateManyWithoutAuctionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rawText?: StringFieldUpdateOperationsInput | string
    objectOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ShabPublicationCountOutputTypeDefaultArgs instead
     */
    export type ShabPublicationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShabPublicationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuctionCountOutputTypeDefaultArgs instead
     */
    export type AuctionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuctionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShabPublicationDefaultArgs instead
     */
    export type ShabPublicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShabPublicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuctionDefaultArgs instead
     */
    export type AuctionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuctionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuctionObjectDefaultArgs instead
     */
    export type AuctionObjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuctionObjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyDefaultArgs instead
     */
    export type PropertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}