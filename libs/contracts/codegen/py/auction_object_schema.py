# generated by datamodel-codegen:
#   filename:  auction-object.schema.json
#   timestamp: 2025-09-08T08:48:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, Optional
from uuid import UUID

from pydantic import AnyUrl, BaseModel, Extra, Field


class PropertyType(Enum):
    Land = 'Land'
    MFH = 'MFH'
    EFH = 'EFH'
    Commercial = 'Commercial'
    Various = 'Various'
    Parking = 'Parking'


class AuctionObject(BaseModel):
    class Config:
        extra = Extra.forbid

    id: UUID = Field(..., description='Unique identifier for the auction object')
    auctionId: UUID = Field(..., description='ID of the associated auction')
    address: str = Field(..., description='Property address')
    propertyDescription: Optional[str] = Field(
        None, description='Full property description from auctionObjects field'
    )
    estimatedValue: Optional[float] = Field(
        None, description='Estimated value in CHF', ge=0.0
    )
    propertyType: Optional[PropertyType] = Field(
        None, description='LLM-classified property type'
    )
    propertyTypeConfidence: Optional[float] = Field(
        None,
        description='LLM confidence score for property type classification',
        ge=0.0,
        le=1.0,
    )
    viewingAppointments: Optional[str] = Field(
        None, description='Viewing appointment information extracted from remarks'
    )
    latitude: Optional[float] = Field(
        None, description='Geographic latitude coordinate', ge=-90.0, le=90.0
    )
    longitude: Optional[float] = Field(
        None, description='Geographic longitude coordinate', ge=-180.0, le=180.0
    )
    aerialImageryUrl: Optional[AnyUrl] = Field(
        None, description='URL to aerial imagery of the property'
    )
    gisData: Optional[Dict[str, Any]] = Field(
        None, description='Geographic Information System data'
    )
    katasterInfo: Optional[Dict[str, Any]] = Field(
        None, description='Cadastral information'
    )
    createdAt: Optional[datetime] = Field(
        None, description='Timestamp when the record was created'
    )
    updatedAt: Optional[datetime] = Field(
        None, description='Timestamp when the record was last updated'
    )
